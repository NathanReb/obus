(*
 * bus.mli
 * -------
 * Copyright : (c) 2008, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implemtation of dbus.
 *)

(** Interface to DBus message bus *)

(** A bus is a DBus connection with a application which routes
    messages between several DBus connections. *)

type t = Connection.t

(** {6 Connection} *)

val session : unit -> t
  (** [session ()] open the session message bus *)

val system : unit -> t
  (** [connect ()] open the system message bus *)

val connect : Address.t list -> t
  (** [connect addresses] connect to the bus which have [addresses] as
      possible addresses. *)

val register_connection : Connection.t -> unit
  (** Register a connection to the message bus, so it become a
      bus. This just request a unqiue name calling
      org.freedesktop.DBus.Hello on the message bus. *)

(** {6 Bus names} *)

val name : t -> Connection.name
  (** [name bus] get the unqiue connection bus name of [bus]. It is
      given to the application for the lifetime of the connection and
      is unique for the lifetime of the bus. *)

(** Note: In order to do other things with bus names, such has
    requesting a name (for example org.truc.MyApplication) you have to
    use the DBus module, which is an autogenerated interface to the
    functions offered by the message bus. *)

(** {6 Proxies} *)

val make_proxy : t -> 'a Interface.t -> Connection.name -> Path.t -> 'a Proxy.t
  (** [make_proxy bus interface dest path] same as [Proxy.make bus
      internface ~destination:dest path] *)

