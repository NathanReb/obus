(*
 * bus.mli
 * -------
 * Copyright : (c) 2008, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implemtation of dbus.
 *)

(** Interface to DBus message bus *)

(** A DBus connection is just a connection with another application
    "speaking" dbus. A message bus is a connection with a application
    which routes messages between several DBus connections. *)

type t
  (** Abstract type for a message bus *)

type name = string
    (** A bus name *)

(** {6 Connection} *)

val session : unit -> t
  (** [session ()] open the session message bus *)

val system : unit -> t
  (** [connect ()] open the system message bus *)

val connect : Address.t list -> t
  (** [connect addresses] connect to the bus which have [address] as
      possible addresses. *)

(** {6 Dispatching} *)

val dispatch : t -> unit
  (** [dispatch bus] read and dispatch one message. If using threads
      [dispatch] do nothing.

      This is a shorthand for [Connection.dispatch (connection bus)] *)

(** {6 Bus names} *)

val name : t -> name
  (** [name bus] get the unqiue connection bus name of [bus]. It is
      given to the application for the lifetime of the connection and
      is unique for the lifetime of the bus. *)

(** Note: In order to do other things with bus names, such has
    requesting a name (for example org.truc.MyApplication) you have to
    use the DBus module, which is an autogenerated interface to the
    functions offered by the message bus. *)

(** {6 Connection associated with a bus} *)

val connection : t -> Connection.t
  (** [connection bus] return the connection associated with a
      bus *)

val from_connection : Connection.t -> t
  (** [from_connection connection] create a message bus from a DBus
      conenction. (This just request a unqiue name calling
      org.freedesktop.DBus.Hello on the message bus) *)

(** {6 Proxies} *)

val make_proxy : t -> 'a Interface.t -> name -> Proxy.path -> 'a Proxy.t
  (** shorthand for [Proxy.make (Bus.connection bus) interface
      ~sender:(Bus.name bus) ~destination:name path] *)
