(*
 * manual.mlt
 * ----------
 * Copyright : (c) 2010, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implementation of D-Bus.
 *)

let obus = texttt "OBus"
let dbus = texttt "D-Bus"
let abstract body = command \"abstract\" [(T, body)] T

let include_code filename =
  command
    ~packages:[(\"graphicx\", \"pdftex\")]
    \"includegraphics\"
    [(A, filename)]
    ~opt:(A, "trim=0cm 0cm 5.7cm 0cm,clip,width=10cm")
    T

let code file =
  figure ~center:true (include_code "{file}.pdf")

let doc = "
{abstract "

  {dbus} is an inter-processes communication protocol, or IPC for
  short, which has recently become a standard on desktop oriented
  computers. It is now possible to talk to a lot application using
  {dbus}. Moreover, it has many bindings/implementations for differents
  languages, which make it easily accessible. {obus} is a pure OCaml
  implementation of this protocol. What makes it different from other
  bindings/implementations is that it is the only one using
  cooperative threads, which make it very simple to fully exploit the
  asynchronous nature of D-Bus.

  {textbf "Note:"} it is advised to have some knowledge about the
  {texttt "Lwt"} library before reading this manual.

"}

{tableofcontents}

(*****************************************************************************)
{section "Introduction"}

{subsection "Overview of {obus}"}

{subsubsection "Packages"}

The main packages of the {obus} distribution is the {texttt "obus"} package,
available via findlib. It contains the core library. Moveover, {obus} although
provides packages for using a bunch of services of the Freedesktop project:

{itemize
   [texttt "obus.hal";
    texttt "obus.notification";
    texttt "obus.network-manager";
    texttt "obus.policykit";
    texttt "obus.udisks";
    texttt "obus.upower"]}

The use of this package is straightforward and you need to know almost nothing
about {dbus} or {obus}. For example, here is a program which open a popup notification:

{code "notification"}

{subsubsection "Modules"}

  OBus contains about 30 public modules. But do not be scared, most of the
  time you will use a very small subset of them. These modules can be
  divided in two categories:

  {itemize ["the high-level API"; "the low-level API"]}

(*****************************************************************************)
{section "Basis"}

{subsection "Connections and message buses"}

  There is two way to talk to another application speaking the D-Bus
  protocol: via a direct connection to the application or via a special
  application called a message bus. A message bus act as a router
  between several applications. On a desktop computer, there are two
  well-known instances: the system message bus, and the user session
  message bus.

  The first one is unique given a computer, and use security
  policies. The second is unique given a user session. Its goal is to
  allow programs running in the session to talk to each other.

  OBus offers two function for connecting to these message buses:
  {texttt "<<OBus_bus.session>>"} and {texttt "<<OBus_bus.system>>"}.

{subsection "Peers and proxies"}

{subsection "Methods, signals and properties"}

(*****************************************************************************)
{section "Using D-Bus services"}

{subsection "Defining members"}

{subsection "Using members"}

{subsection "Using tools to generate member definitions"}

{subsection "The {obus} IDL language"}

{subsection "Name tracking"}

(*****************************************************************************)
{section "Writing D-Bus services"}

{subsection "Defining interfaces"}

{subsection "Objects management"}

(*****************************************************************************)
{section "One-to-one communication"}

{subsection "Starting a  server"}

(*****************************************************************************)
{section "Low-level use of D-Bus"}

{subsection "Message filters"}

{subsection "Matching rules"}

{subsection "Defining new transports"}

{subsection "Defining new authentication mechanisms"}

"

let () = emit (document
                 ~title:"OBus user manual"
                 ~author:"Jérémie Dimino"
                 ~packages:["inputenc", "utf8"]
                 doc)
