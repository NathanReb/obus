OBus is a pure ocaml implementation of DBus.

url: https://forge.ocamlcore.org/projects/obus/

It comes with a library and a tool for generating high-level caml
interfaces to DBus objects.

* Installation:

To install OBus just run the install.sh script with the wanted prefix
as argument.

* Using the library

OBus install the two packages obus and obus.threads with
ocamlfind. The two libraries have exactly the same interface, but you
must use obus.threads if you use threads.

* Using tools:

There is two tools in the obus distribution:

obus-introspect which can introspect a DBus service, and obus-binder
which is the tool for generating caml modules from DBus introspection
data.

The two can be used out of the box, so for example to generate a
binding for org.freedesktop.Notifications:

$ obus-introspect org.freedesktop.Notifications /org/freedesktop/Notifications > notif.xml
$ obus-binder notif.xml

This will generate two files, notif.ml and notif.mli. Their use is
very simple, look at the samples distributed with obus to see how it
works.

You can also put annotations in the xml to modify the generated code,
like for examples choosing the caml type for a method. This part is
currently not documented but you can have a look at the file
obus/DBus.xml if you want to use it now.

All the modules generated by obus-binder can be used with obus or
obus.threads.

* Planed:

Next versions of OBus will include:

- high-level handling of service proposal
- server mode for one-to-one communication
- more transports support (currently it support only unix socket)
- more authentications protocol support (currently it support only
  external)
- conversion between dbus variants and custom ocaml variants

* Development:

The last development version of obus can always be found in the darcs
repository hosted at darcs.ocamlcore.org:

$ darcs get http://darcs.ocamlcore.org/repos/obus/obus
