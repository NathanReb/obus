(* File auto-generated by obus_gen_interface.best, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_UDisks =
struct
  let interface = "org.freedesktop.UDisks"
  let m_EnumerateAdapters = {
    Method.interface = interface;
    Method.member = "EnumerateAdapters";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
  }
  let m_EnumerateExpanders = {
    Method.interface = interface;
    Method.member = "EnumerateExpanders";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
  }
  let m_EnumeratePorts = {
    Method.interface = interface;
    Method.member = "EnumeratePorts";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
  }
  let m_EnumerateDevices = {
    Method.interface = interface;
    Method.member = "EnumerateDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
  }
  let m_EnumerateDeviceFiles = {
    Method.interface = interface;
    Method.member = "EnumerateDeviceFiles";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "device_files", array basic_string));
  }
  let m_FindDeviceByDeviceFile = {
    Method.interface = interface;
    Method.member = "FindDeviceByDeviceFile";
    Method.i_args = (arg1
                       (Some "device_file", basic_string));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
  }
  let m_FindDeviceByMajorMinor = {
    Method.interface = interface;
    Method.member = "FindDeviceByMajorMinor";
    Method.i_args = (arg2
                       (Some "device_major", basic_int64)
                       (Some "device_minor", basic_int64));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
  }
  let m_DriveInhibitAllPolling = {
    Method.interface = interface;
    Method.member = "DriveInhibitAllPolling";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "cookie", basic_string));
  }
  let m_DriveUninhibitAllPolling = {
    Method.interface = interface;
    Method.member = "DriveUninhibitAllPolling";
    Method.i_args = (arg1
                       (Some "cookie", basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveSetAllSpindownTimeouts = {
    Method.interface = interface;
    Method.member = "DriveSetAllSpindownTimeouts";
    Method.i_args = (arg2
                       (Some "timeout_seconds", basic_int32)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "cookie", basic_string));
  }
  let m_DriveUnsetAllSpindownTimeouts = {
    Method.interface = interface;
    Method.member = "DriveUnsetAllSpindownTimeouts";
    Method.i_args = (arg1
                       (Some "cookie", basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2VGStart = {
    Method.interface = interface;
    Method.member = "LinuxLvm2VGStart";
    Method.i_args = (arg2
                       (Some "uuid", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2VGStop = {
    Method.interface = interface;
    Method.member = "LinuxLvm2VGStop";
    Method.i_args = (arg2
                       (Some "uuid", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2VGSetName = {
    Method.interface = interface;
    Method.member = "LinuxLvm2VGSetName";
    Method.i_args = (arg2
                       (Some "uuid", basic_string)
                       (Some "name", basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2VGAddPV = {
    Method.interface = interface;
    Method.member = "LinuxLvm2VGAddPV";
    Method.i_args = (arg3
                       (Some "uuid", basic_string)
                       (Some "physical_volume", basic_object_path)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2VGRemovePV = {
    Method.interface = interface;
    Method.member = "LinuxLvm2VGRemovePV";
    Method.i_args = (arg3
                       (Some "vg_uuid", basic_string)
                       (Some "pv_uuid", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2LVSetName = {
    Method.interface = interface;
    Method.member = "LinuxLvm2LVSetName";
    Method.i_args = (arg3
                       (Some "group_uuid", basic_string)
                       (Some "uuid", basic_string)
                       (Some "name", basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2LVStart = {
    Method.interface = interface;
    Method.member = "LinuxLvm2LVStart";
    Method.i_args = (arg3
                       (Some "group_uuid", basic_string)
                       (Some "uuid", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2LVRemove = {
    Method.interface = interface;
    Method.member = "LinuxLvm2LVRemove";
    Method.i_args = (arg3
                       (Some "group_uuid", basic_string)
                       (Some "uuid", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2LVCreate = {
    Method.interface = interface;
    Method.member = "LinuxLvm2LVCreate";
    Method.i_args = (arg9
                       (Some "group_uuid", basic_string)
                       (Some "name", basic_string)
                       (Some "size", basic_uint64)
                       (Some "num_stripes", basic_uint32)
                       (Some "stripe_size", basic_uint64)
                       (Some "num_mirrors", basic_uint32)
                       (Some "options", array basic_string)
                       (Some "fstype", basic_string)
                       (Some "fsoptions", array basic_string));
    Method.o_args = (arg1
                       (Some "created_device", basic_object_path));
  }
  let m_LinuxMdStart = {
    Method.interface = interface;
    Method.member = "LinuxMdStart";
    Method.i_args = (arg2
                       (Some "components", array basic_object_path)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
  }
  let m_LinuxMdCreate = {
    Method.interface = interface;
    Method.member = "LinuxMdCreate";
    Method.i_args = (arg5
                       (Some "components", array basic_object_path)
                       (Some "level", basic_string)
                       (Some "stripe_size", basic_uint64)
                       (Some "name", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "device", basic_object_path));
  }
  let m_Inhibit = {
    Method.interface = interface;
    Method.member = "Inhibit";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "cookie", basic_string));
  }
  let m_Uninhibit = {
    Method.interface = interface;
    Method.member = "Uninhibit";
    Method.i_args = (arg1
                       (Some "cookie", basic_string));
    Method.o_args = (arg0);
  }
  let s_DeviceAdded = {
    Signal.interface = interface;
    Signal.member = "DeviceAdded";
    Signal.args = (arg1
                       (Some "device", basic_object_path));
  }
  let s_DeviceRemoved = {
    Signal.interface = interface;
    Signal.member = "DeviceRemoved";
    Signal.args = (arg1
                       (Some "device", basic_object_path));
  }
  let s_DeviceChanged = {
    Signal.interface = interface;
    Signal.member = "DeviceChanged";
    Signal.args = (arg1
                       (Some "device", basic_object_path));
  }
  let s_DeviceJobChanged = {
    Signal.interface = interface;
    Signal.member = "DeviceJobChanged";
    Signal.args = (arg8
                       (Some "device", basic_object_path)
                       (Some "job_in_progress", basic_boolean)
                       (Some "job_is_cancellable", basic_boolean)
                       (Some "job_id", basic_string)
                       (Some "job_num_tasks", basic_int32)
                       (Some "job_cur_task", basic_int32)
                       (Some "job_cur_task_id", basic_string)
                       (Some "job_cur_task_percentage", basic_double));
  }
  let s_AdapterAdded = {
    Signal.interface = interface;
    Signal.member = "AdapterAdded";
    Signal.args = (arg1
                       (Some "adapter", basic_object_path));
  }
  let s_AdapterRemoved = {
    Signal.interface = interface;
    Signal.member = "AdapterRemoved";
    Signal.args = (arg1
                       (Some "adapter", basic_object_path));
  }
  let s_AdapterChanged = {
    Signal.interface = interface;
    Signal.member = "AdapterChanged";
    Signal.args = (arg1
                       (Some "adapter", basic_object_path));
  }
  let s_ExpanderAdded = {
    Signal.interface = interface;
    Signal.member = "ExpanderAdded";
    Signal.args = (arg1
                       (Some "expander", basic_object_path));
  }
  let s_ExpanderRemoved = {
    Signal.interface = interface;
    Signal.member = "ExpanderRemoved";
    Signal.args = (arg1
                       (Some "expander", basic_object_path));
  }
  let s_ExpanderChanged = {
    Signal.interface = interface;
    Signal.member = "ExpanderChanged";
    Signal.args = (arg1
                       (Some "expander", basic_object_path));
  }
  let s_PortAdded = {
    Signal.interface = interface;
    Signal.member = "PortAdded";
    Signal.args = (arg1
                       (Some "port", basic_object_path));
  }
  let s_PortRemoved = {
    Signal.interface = interface;
    Signal.member = "PortRemoved";
    Signal.args = (arg1
                       (Some "port", basic_object_path));
  }
  let s_PortChanged = {
    Signal.interface = interface;
    Signal.member = "PortChanged";
    Signal.args = (arg1
                       (Some "port", basic_object_path));
  }
  let p_DaemonVersion = {
    Property.interface = interface;
    Property.member = "DaemonVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DaemonIsInhibited = {
    Property.interface = interface;
    Property.member = "DaemonIsInhibited";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_SupportsLuksDevices = {
    Property.interface = interface;
    Property.member = "SupportsLuksDevices";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_KnownFilesystems = {
    Property.interface = interface;
    Property.member = "KnownFilesystems";
    Property.typ = array (structure (seq14 basic_string basic_string basic_boolean basic_boolean basic_boolean basic_uint32 basic_boolean basic_boolean basic_boolean basic_boolean basic_boolean basic_boolean basic_boolean basic_boolean));
    Property.access = Property.readable;
  }
  let make
      ?notify_mode
      ~m_EnumerateAdapters:m__EnumerateAdapters
      ~m_EnumerateExpanders:m__EnumerateExpanders
      ~m_EnumeratePorts:m__EnumeratePorts
      ~m_EnumerateDevices:m__EnumerateDevices
      ~m_EnumerateDeviceFiles:m__EnumerateDeviceFiles
      ~m_FindDeviceByDeviceFile:m__FindDeviceByDeviceFile
      ~m_FindDeviceByMajorMinor:m__FindDeviceByMajorMinor
      ~m_DriveInhibitAllPolling:m__DriveInhibitAllPolling
      ~m_DriveUninhibitAllPolling:m__DriveUninhibitAllPolling
      ~m_DriveSetAllSpindownTimeouts:m__DriveSetAllSpindownTimeouts
      ~m_DriveUnsetAllSpindownTimeouts:m__DriveUnsetAllSpindownTimeouts
      ~m_LinuxLvm2VGStart:m__LinuxLvm2VGStart
      ~m_LinuxLvm2VGStop:m__LinuxLvm2VGStop
      ~m_LinuxLvm2VGSetName:m__LinuxLvm2VGSetName
      ~m_LinuxLvm2VGAddPV:m__LinuxLvm2VGAddPV
      ~m_LinuxLvm2VGRemovePV:m__LinuxLvm2VGRemovePV
      ~m_LinuxLvm2LVSetName:m__LinuxLvm2LVSetName
      ~m_LinuxLvm2LVStart:m__LinuxLvm2LVStart
      ~m_LinuxLvm2LVRemove:m__LinuxLvm2LVRemove
      ~m_LinuxLvm2LVCreate:m__LinuxLvm2LVCreate
      ~m_LinuxMdStart:m__LinuxMdStart
      ~m_LinuxMdCreate:m__LinuxMdCreate
      ~m_Inhibit:m__Inhibit
      ~m_Uninhibit:m__Uninhibit
      ~p_DaemonVersion:p__DaemonVersion
      ~p_DaemonIsInhibited:p__DaemonIsInhibited
      ~p_SupportsLuksDevices:p__SupportsLuksDevices
      ~p_KnownFilesystems:p__KnownFilesystems
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_EnumerateAdapters m__EnumerateAdapters;
        method_info m_EnumerateExpanders m__EnumerateExpanders;
        method_info m_EnumeratePorts m__EnumeratePorts;
        method_info m_EnumerateDevices m__EnumerateDevices;
        method_info m_EnumerateDeviceFiles m__EnumerateDeviceFiles;
        method_info m_FindDeviceByDeviceFile m__FindDeviceByDeviceFile;
        method_info m_FindDeviceByMajorMinor m__FindDeviceByMajorMinor;
        method_info m_DriveInhibitAllPolling m__DriveInhibitAllPolling;
        method_info m_DriveUninhibitAllPolling m__DriveUninhibitAllPolling;
        method_info m_DriveSetAllSpindownTimeouts m__DriveSetAllSpindownTimeouts;
        method_info m_DriveUnsetAllSpindownTimeouts m__DriveUnsetAllSpindownTimeouts;
        method_info m_LinuxLvm2VGStart m__LinuxLvm2VGStart;
        method_info m_LinuxLvm2VGStop m__LinuxLvm2VGStop;
        method_info m_LinuxLvm2VGSetName m__LinuxLvm2VGSetName;
        method_info m_LinuxLvm2VGAddPV m__LinuxLvm2VGAddPV;
        method_info m_LinuxLvm2VGRemovePV m__LinuxLvm2VGRemovePV;
        method_info m_LinuxLvm2LVSetName m__LinuxLvm2LVSetName;
        method_info m_LinuxLvm2LVStart m__LinuxLvm2LVStart;
        method_info m_LinuxLvm2LVRemove m__LinuxLvm2LVRemove;
        method_info m_LinuxLvm2LVCreate m__LinuxLvm2LVCreate;
        method_info m_LinuxMdStart m__LinuxMdStart;
        method_info m_LinuxMdCreate m__LinuxMdCreate;
        method_info m_Inhibit m__Inhibit;
        method_info m_Uninhibit m__Uninhibit;
      |]
      [|
        signal_info s_DeviceAdded;
        signal_info s_DeviceRemoved;
        signal_info s_DeviceChanged;
        signal_info s_DeviceJobChanged;
        signal_info s_AdapterAdded;
        signal_info s_AdapterRemoved;
        signal_info s_AdapterChanged;
        signal_info s_ExpanderAdded;
        signal_info s_ExpanderRemoved;
        signal_info s_ExpanderChanged;
        signal_info s_PortAdded;
        signal_info s_PortRemoved;
        signal_info s_PortChanged;
      |]
      [|
        property_r_info p_DaemonVersion p__DaemonVersion;
        property_r_info p_DaemonIsInhibited p__DaemonIsInhibited;
        property_r_info p_SupportsLuksDevices p__SupportsLuksDevices;
        property_r_info p_KnownFilesystems p__KnownFilesystems;
      |]
end
module Org_freedesktop_UDisks_Adapter =
struct
  let interface = "org.freedesktop.UDisks.Adapter"
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let p_NativePath = {
    Property.interface = interface;
    Property.member = "NativePath";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Vendor = {
    Property.interface = interface;
    Property.member = "Vendor";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Model = {
    Property.interface = interface;
    Property.member = "Model";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Driver = {
    Property.interface = interface;
    Property.member = "Driver";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_NumPorts = {
    Property.interface = interface;
    Property.member = "NumPorts";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_Fabric = {
    Property.interface = interface;
    Property.member = "Fabric";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode
      ~p_NativePath:p__NativePath
      ~p_Vendor:p__Vendor
      ~p_Model:p__Model
      ~p_Driver:p__Driver
      ~p_NumPorts:p__NumPorts
      ~p_Fabric:p__Fabric
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
      |]
      [|
        signal_info s_Changed;
      |]
      [|
        property_r_info p_NativePath p__NativePath;
        property_r_info p_Vendor p__Vendor;
        property_r_info p_Model p__Model;
        property_r_info p_Driver p__Driver;
        property_r_info p_NumPorts p__NumPorts;
        property_r_info p_Fabric p__Fabric;
      |]
end
module Org_freedesktop_UDisks_Device =
struct
  let interface = "org.freedesktop.UDisks.Device"
  let m_JobCancel = {
    Method.interface = interface;
    Method.member = "JobCancel";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let m_PartitionTableCreate = {
    Method.interface = interface;
    Method.member = "PartitionTableCreate";
    Method.i_args = (arg2
                       (Some "scheme", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_PartitionDelete = {
    Method.interface = interface;
    Method.member = "PartitionDelete";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_PartitionCreate = {
    Method.interface = interface;
    Method.member = "PartitionCreate";
    Method.i_args = (arg8
                       (Some "offset", basic_uint64)
                       (Some "size", basic_uint64)
                       (Some "type", basic_string)
                       (Some "label", basic_string)
                       (Some "flags", array basic_string)
                       (Some "options", array basic_string)
                       (Some "fstype", basic_string)
                       (Some "fsoptions", array basic_string));
    Method.o_args = (arg1
                       (Some "created_device", basic_object_path));
  }
  let m_PartitionModify = {
    Method.interface = interface;
    Method.member = "PartitionModify";
    Method.i_args = (arg3
                       (Some "type", basic_string)
                       (Some "label", basic_string)
                       (Some "flags", array basic_string));
    Method.o_args = (arg0);
  }
  let m_FilesystemCreate = {
    Method.interface = interface;
    Method.member = "FilesystemCreate";
    Method.i_args = (arg2
                       (Some "fstype", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_FilesystemSetLabel = {
    Method.interface = interface;
    Method.member = "FilesystemSetLabel";
    Method.i_args = (arg1
                       (Some "new_label", basic_string));
    Method.o_args = (arg0);
  }
  let m_FilesystemMount = {
    Method.interface = interface;
    Method.member = "FilesystemMount";
    Method.i_args = (arg2
                       (Some "filesystem_type", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "mount_path", basic_string));
  }
  let m_FilesystemUnmount = {
    Method.interface = interface;
    Method.member = "FilesystemUnmount";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_FilesystemCheck = {
    Method.interface = interface;
    Method.member = "FilesystemCheck";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "is_clean", basic_boolean));
  }
  let m_FilesystemListOpenFiles = {
    Method.interface = interface;
    Method.member = "FilesystemListOpenFiles";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "processes", array (structure (seq3 basic_uint32 basic_uint32 basic_string))));
  }
  let m_LuksUnlock = {
    Method.interface = interface;
    Method.member = "LuksUnlock";
    Method.i_args = (arg2
                       (Some "passphrase", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "cleartext_device", basic_object_path));
  }
  let m_LuksLock = {
    Method.interface = interface;
    Method.member = "LuksLock";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LuksChangePassphrase = {
    Method.interface = interface;
    Method.member = "LuksChangePassphrase";
    Method.i_args = (arg2
                       (Some "current_passphrase", basic_string)
                       (Some "new_passphrase", basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxMdAddSpare = {
    Method.interface = interface;
    Method.member = "LinuxMdAddSpare";
    Method.i_args = (arg2
                       (Some "component", basic_object_path)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxMdExpand = {
    Method.interface = interface;
    Method.member = "LinuxMdExpand";
    Method.i_args = (arg2
                       (Some "components", array basic_object_path)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxMdRemoveComponent = {
    Method.interface = interface;
    Method.member = "LinuxMdRemoveComponent";
    Method.i_args = (arg2
                       (Some "component", basic_object_path)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxMdStop = {
    Method.interface = interface;
    Method.member = "LinuxMdStop";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxLvm2LVStop = {
    Method.interface = interface;
    Method.member = "LinuxLvm2LVStop";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_LinuxMdCheck = {
    Method.interface = interface;
    Method.member = "LinuxMdCheck";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "number_of_errors", basic_uint64));
  }
  let m_DriveInhibitPolling = {
    Method.interface = interface;
    Method.member = "DriveInhibitPolling";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "cookie", basic_string));
  }
  let m_DriveUninhibitPolling = {
    Method.interface = interface;
    Method.member = "DriveUninhibitPolling";
    Method.i_args = (arg1
                       (Some "cookie", basic_string));
    Method.o_args = (arg0);
  }
  let m_DrivePollMedia = {
    Method.interface = interface;
    Method.member = "DrivePollMedia";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let m_DriveEject = {
    Method.interface = interface;
    Method.member = "DriveEject";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveDetach = {
    Method.interface = interface;
    Method.member = "DriveDetach";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveSetSpindownTimeout = {
    Method.interface = interface;
    Method.member = "DriveSetSpindownTimeout";
    Method.i_args = (arg2
                       (Some "timeout_seconds", basic_int32)
                       (Some "options", array basic_string));
    Method.o_args = (arg1
                       (Some "cookie", basic_string));
  }
  let m_DriveUnsetSpindownTimeout = {
    Method.interface = interface;
    Method.member = "DriveUnsetSpindownTimeout";
    Method.i_args = (arg1
                       (Some "cookie", basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveAtaSmartRefreshData = {
    Method.interface = interface;
    Method.member = "DriveAtaSmartRefreshData";
    Method.i_args = (arg1
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveAtaSmartInitiateSelftest = {
    Method.interface = interface;
    Method.member = "DriveAtaSmartInitiateSelftest";
    Method.i_args = (arg2
                       (Some "test", basic_string)
                       (Some "options", array basic_string));
    Method.o_args = (arg0);
  }
  let m_DriveBenchmark = {
    Method.interface = interface;
    Method.member = "DriveBenchmark";
    Method.i_args = (arg2
                       (Some "do_write_benchmark", basic_boolean)
                       (Some "options", array basic_string));
    Method.o_args = (arg3
                       (Some "read_transfer_rate_results", array (structure (seq2 basic_uint64 basic_double)))
                       (Some "write_transfer_rate_results", array (structure (seq2 basic_uint64 basic_double)))
                       (Some "access_time_results", array (structure (seq2 basic_uint64 basic_double))));
  }
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let s_JobChanged = {
    Signal.interface = interface;
    Signal.member = "JobChanged";
    Signal.args = (arg5
                       (Some "job_in_progress", basic_boolean)
                       (Some "job_is_cancellable", basic_boolean)
                       (Some "job_id", basic_string)
                       (Some "job_initiated_by_uid", basic_uint32)
                       (Some "job_percentage", basic_double));
  }
  let p_NativePath = {
    Property.interface = interface;
    Property.member = "NativePath";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceDetectionTime = {
    Property.interface = interface;
    Property.member = "DeviceDetectionTime";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DeviceMediaDetectionTime = {
    Property.interface = interface;
    Property.member = "DeviceMediaDetectionTime";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DeviceMajor = {
    Property.interface = interface;
    Property.member = "DeviceMajor";
    Property.typ = basic_int64;
    Property.access = Property.readable;
  }
  let p_DeviceMinor = {
    Property.interface = interface;
    Property.member = "DeviceMinor";
    Property.typ = basic_int64;
    Property.access = Property.readable;
  }
  let p_DeviceFile = {
    Property.interface = interface;
    Property.member = "DeviceFile";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceFilePresentation = {
    Property.interface = interface;
    Property.member = "DeviceFilePresentation";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceFileById = {
    Property.interface = interface;
    Property.member = "DeviceFileById";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceFileByPath = {
    Property.interface = interface;
    Property.member = "DeviceFileByPath";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceIsSystemInternal = {
    Property.interface = interface;
    Property.member = "DeviceIsSystemInternal";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsPartition = {
    Property.interface = interface;
    Property.member = "DeviceIsPartition";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsPartitionTable = {
    Property.interface = interface;
    Property.member = "DeviceIsPartitionTable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsRemovable = {
    Property.interface = interface;
    Property.member = "DeviceIsRemovable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMediaAvailable = {
    Property.interface = interface;
    Property.member = "DeviceIsMediaAvailable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMediaChangeDetected = {
    Property.interface = interface;
    Property.member = "DeviceIsMediaChangeDetected";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMediaChangeDetectionPolling = {
    Property.interface = interface;
    Property.member = "DeviceIsMediaChangeDetectionPolling";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMediaChangeDetectionInhibitable = {
    Property.interface = interface;
    Property.member = "DeviceIsMediaChangeDetectionInhibitable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMediaChangeDetectionInhibited = {
    Property.interface = interface;
    Property.member = "DeviceIsMediaChangeDetectionInhibited";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsReadOnly = {
    Property.interface = interface;
    Property.member = "DeviceIsReadOnly";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsDrive = {
    Property.interface = interface;
    Property.member = "DeviceIsDrive";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsOpticalDisc = {
    Property.interface = interface;
    Property.member = "DeviceIsOpticalDisc";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsMounted = {
    Property.interface = interface;
    Property.member = "DeviceIsMounted";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceMountPaths = {
    Property.interface = interface;
    Property.member = "DeviceMountPaths";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_DeviceMountedByUid = {
    Property.interface = interface;
    Property.member = "DeviceMountedByUid";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_DeviceIsLuks = {
    Property.interface = interface;
    Property.member = "DeviceIsLuks";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLuksCleartext = {
    Property.interface = interface;
    Property.member = "DeviceIsLuksCleartext";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxMdComponent = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxMdComponent";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxMd = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxMd";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxLvm2LV = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxLvm2LV";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxLvm2PV = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxLvm2PV";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxDmmpComponent = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxDmmpComponent";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxDmmp = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxDmmp";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceIsLinuxLoop = {
    Property.interface = interface;
    Property.member = "DeviceIsLinuxLoop";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DeviceSize = {
    Property.interface = interface;
    Property.member = "DeviceSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DeviceBlockSize = {
    Property.interface = interface;
    Property.member = "DeviceBlockSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DevicePresentationHide = {
    Property.interface = interface;
    Property.member = "DevicePresentationHide";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DevicePresentationNopolicy = {
    Property.interface = interface;
    Property.member = "DevicePresentationNopolicy";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DevicePresentationName = {
    Property.interface = interface;
    Property.member = "DevicePresentationName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DevicePresentationIconName = {
    Property.interface = interface;
    Property.member = "DevicePresentationIconName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_JobInProgress = {
    Property.interface = interface;
    Property.member = "JobInProgress";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_JobId = {
    Property.interface = interface;
    Property.member = "JobId";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_JobInitiatedByUid = {
    Property.interface = interface;
    Property.member = "JobInitiatedByUid";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_JobIsCancellable = {
    Property.interface = interface;
    Property.member = "JobIsCancellable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_JobPercentage = {
    Property.interface = interface;
    Property.member = "JobPercentage";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_IdUsage = {
    Property.interface = interface;
    Property.member = "IdUsage";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_IdType = {
    Property.interface = interface;
    Property.member = "IdType";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_IdVersion = {
    Property.interface = interface;
    Property.member = "IdVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_IdUuid = {
    Property.interface = interface;
    Property.member = "IdUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_IdLabel = {
    Property.interface = interface;
    Property.member = "IdLabel";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LuksHolder = {
    Property.interface = interface;
    Property.member = "LuksHolder";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_LuksCleartextSlave = {
    Property.interface = interface;
    Property.member = "LuksCleartextSlave";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_LuksCleartextUnlockedByUid = {
    Property.interface = interface;
    Property.member = "LuksCleartextUnlockedByUid";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_PartitionSlave = {
    Property.interface = interface;
    Property.member = "PartitionSlave";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_PartitionScheme = {
    Property.interface = interface;
    Property.member = "PartitionScheme";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionType = {
    Property.interface = interface;
    Property.member = "PartitionType";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionLabel = {
    Property.interface = interface;
    Property.member = "PartitionLabel";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionUuid = {
    Property.interface = interface;
    Property.member = "PartitionUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionFlags = {
    Property.interface = interface;
    Property.member = "PartitionFlags";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionNumber = {
    Property.interface = interface;
    Property.member = "PartitionNumber";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_PartitionOffset = {
    Property.interface = interface;
    Property.member = "PartitionOffset";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_PartitionSize = {
    Property.interface = interface;
    Property.member = "PartitionSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_PartitionAlignmentOffset = {
    Property.interface = interface;
    Property.member = "PartitionAlignmentOffset";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_PartitionTableScheme = {
    Property.interface = interface;
    Property.member = "PartitionTableScheme";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_PartitionTableCount = {
    Property.interface = interface;
    Property.member = "PartitionTableCount";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_DriveVendor = {
    Property.interface = interface;
    Property.member = "DriveVendor";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveModel = {
    Property.interface = interface;
    Property.member = "DriveModel";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveRevision = {
    Property.interface = interface;
    Property.member = "DriveRevision";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveSerial = {
    Property.interface = interface;
    Property.member = "DriveSerial";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveWwn = {
    Property.interface = interface;
    Property.member = "DriveWwn";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveRotationRate = {
    Property.interface = interface;
    Property.member = "DriveRotationRate";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_DriveWriteCache = {
    Property.interface = interface;
    Property.member = "DriveWriteCache";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveConnectionInterface = {
    Property.interface = interface;
    Property.member = "DriveConnectionInterface";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveConnectionSpeed = {
    Property.interface = interface;
    Property.member = "DriveConnectionSpeed";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DriveMediaCompatibility = {
    Property.interface = interface;
    Property.member = "DriveMediaCompatibility";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_DriveMedia = {
    Property.interface = interface;
    Property.member = "DriveMedia";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveIsMediaEjectable = {
    Property.interface = interface;
    Property.member = "DriveIsMediaEjectable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DriveCanDetach = {
    Property.interface = interface;
    Property.member = "DriveCanDetach";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DriveCanSpindown = {
    Property.interface = interface;
    Property.member = "DriveCanSpindown";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DriveIsRotational = {
    Property.interface = interface;
    Property.member = "DriveIsRotational";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DriveAdapter = {
    Property.interface = interface;
    Property.member = "DriveAdapter";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_DrivePorts = {
    Property.interface = interface;
    Property.member = "DrivePorts";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
  }
  let p_DriveSimilarDevices = {
    Property.interface = interface;
    Property.member = "DriveSimilarDevices";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
  }
  let p_OpticalDiscIsBlank = {
    Property.interface = interface;
    Property.member = "OpticalDiscIsBlank";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_OpticalDiscIsAppendable = {
    Property.interface = interface;
    Property.member = "OpticalDiscIsAppendable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_OpticalDiscIsClosed = {
    Property.interface = interface;
    Property.member = "OpticalDiscIsClosed";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_OpticalDiscNumTracks = {
    Property.interface = interface;
    Property.member = "OpticalDiscNumTracks";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_OpticalDiscNumAudioTracks = {
    Property.interface = interface;
    Property.member = "OpticalDiscNumAudioTracks";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_OpticalDiscNumSessions = {
    Property.interface = interface;
    Property.member = "OpticalDiscNumSessions";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_DriveAtaSmartIsAvailable = {
    Property.interface = interface;
    Property.member = "DriveAtaSmartIsAvailable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_DriveAtaSmartTimeCollected = {
    Property.interface = interface;
    Property.member = "DriveAtaSmartTimeCollected";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_DriveAtaSmartStatus = {
    Property.interface = interface;
    Property.member = "DriveAtaSmartStatus";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_DriveAtaSmartBlob = {
    Property.interface = interface;
    Property.member = "DriveAtaSmartBlob";
    Property.typ = byte_array;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentLevel = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentLevel";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentPosition = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentPosition";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentNumRaidDevices = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentNumRaidDevices";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentUuid = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentName = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentHomeHost = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentHomeHost";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentVersion = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentHolder = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentHolder";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_LinuxMdComponentState = {
    Property.interface = interface;
    Property.member = "LinuxMdComponentState";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdState = {
    Property.interface = interface;
    Property.member = "LinuxMdState";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdLevel = {
    Property.interface = interface;
    Property.member = "LinuxMdLevel";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdUuid = {
    Property.interface = interface;
    Property.member = "LinuxMdUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdHomeHost = {
    Property.interface = interface;
    Property.member = "LinuxMdHomeHost";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdName = {
    Property.interface = interface;
    Property.member = "LinuxMdName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdNumRaidDevices = {
    Property.interface = interface;
    Property.member = "LinuxMdNumRaidDevices";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_LinuxMdVersion = {
    Property.interface = interface;
    Property.member = "LinuxMdVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdSlaves = {
    Property.interface = interface;
    Property.member = "LinuxMdSlaves";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
  }
  let p_LinuxMdIsDegraded = {
    Property.interface = interface;
    Property.member = "LinuxMdIsDegraded";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_LinuxMdSyncAction = {
    Property.interface = interface;
    Property.member = "LinuxMdSyncAction";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxMdSyncPercentage = {
    Property.interface = interface;
    Property.member = "LinuxMdSyncPercentage";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_LinuxMdSyncSpeed = {
    Property.interface = interface;
    Property.member = "LinuxMdSyncSpeed";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVUuid = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVNumMetadataAreas = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVNumMetadataAreas";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupName = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupUuid = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupSize = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupUnallocatedSize = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupUnallocatedSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupSequenceNumber = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupSequenceNumber";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupExtentSize = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupExtentSize";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupPhysicalVolumes = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupPhysicalVolumes";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2PVGroupLogicalVolumes = {
    Property.interface = interface;
    Property.member = "LinuxLvm2PVGroupLogicalVolumes";
    Property.typ = array basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2LVName = {
    Property.interface = interface;
    Property.member = "LinuxLvm2LVName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2LVUuid = {
    Property.interface = interface;
    Property.member = "LinuxLvm2LVUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2LVGroupName = {
    Property.interface = interface;
    Property.member = "LinuxLvm2LVGroupName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLvm2LVGroupUuid = {
    Property.interface = interface;
    Property.member = "LinuxLvm2LVGroupUuid";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxDmmpComponentHolder = {
    Property.interface = interface;
    Property.member = "LinuxDmmpComponentHolder";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_LinuxDmmpName = {
    Property.interface = interface;
    Property.member = "LinuxDmmpName";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxDmmpSlaves = {
    Property.interface = interface;
    Property.member = "LinuxDmmpSlaves";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
  }
  let p_LinuxDmmpParameters = {
    Property.interface = interface;
    Property.member = "LinuxDmmpParameters";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_LinuxLoopFilename = {
    Property.interface = interface;
    Property.member = "LinuxLoopFilename";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode
      ~m_JobCancel:m__JobCancel
      ~m_PartitionTableCreate:m__PartitionTableCreate
      ~m_PartitionDelete:m__PartitionDelete
      ~m_PartitionCreate:m__PartitionCreate
      ~m_PartitionModify:m__PartitionModify
      ~m_FilesystemCreate:m__FilesystemCreate
      ~m_FilesystemSetLabel:m__FilesystemSetLabel
      ~m_FilesystemMount:m__FilesystemMount
      ~m_FilesystemUnmount:m__FilesystemUnmount
      ~m_FilesystemCheck:m__FilesystemCheck
      ~m_FilesystemListOpenFiles:m__FilesystemListOpenFiles
      ~m_LuksUnlock:m__LuksUnlock
      ~m_LuksLock:m__LuksLock
      ~m_LuksChangePassphrase:m__LuksChangePassphrase
      ~m_LinuxMdAddSpare:m__LinuxMdAddSpare
      ~m_LinuxMdExpand:m__LinuxMdExpand
      ~m_LinuxMdRemoveComponent:m__LinuxMdRemoveComponent
      ~m_LinuxMdStop:m__LinuxMdStop
      ~m_LinuxLvm2LVStop:m__LinuxLvm2LVStop
      ~m_LinuxMdCheck:m__LinuxMdCheck
      ~m_DriveInhibitPolling:m__DriveInhibitPolling
      ~m_DriveUninhibitPolling:m__DriveUninhibitPolling
      ~m_DrivePollMedia:m__DrivePollMedia
      ~m_DriveEject:m__DriveEject
      ~m_DriveDetach:m__DriveDetach
      ~m_DriveSetSpindownTimeout:m__DriveSetSpindownTimeout
      ~m_DriveUnsetSpindownTimeout:m__DriveUnsetSpindownTimeout
      ~m_DriveAtaSmartRefreshData:m__DriveAtaSmartRefreshData
      ~m_DriveAtaSmartInitiateSelftest:m__DriveAtaSmartInitiateSelftest
      ~m_DriveBenchmark:m__DriveBenchmark
      ~p_NativePath:p__NativePath
      ~p_DeviceDetectionTime:p__DeviceDetectionTime
      ~p_DeviceMediaDetectionTime:p__DeviceMediaDetectionTime
      ~p_DeviceMajor:p__DeviceMajor
      ~p_DeviceMinor:p__DeviceMinor
      ~p_DeviceFile:p__DeviceFile
      ~p_DeviceFilePresentation:p__DeviceFilePresentation
      ~p_DeviceFileById:p__DeviceFileById
      ~p_DeviceFileByPath:p__DeviceFileByPath
      ~p_DeviceIsSystemInternal:p__DeviceIsSystemInternal
      ~p_DeviceIsPartition:p__DeviceIsPartition
      ~p_DeviceIsPartitionTable:p__DeviceIsPartitionTable
      ~p_DeviceIsRemovable:p__DeviceIsRemovable
      ~p_DeviceIsMediaAvailable:p__DeviceIsMediaAvailable
      ~p_DeviceIsMediaChangeDetected:p__DeviceIsMediaChangeDetected
      ~p_DeviceIsMediaChangeDetectionPolling:p__DeviceIsMediaChangeDetectionPolling
      ~p_DeviceIsMediaChangeDetectionInhibitable:p__DeviceIsMediaChangeDetectionInhibitable
      ~p_DeviceIsMediaChangeDetectionInhibited:p__DeviceIsMediaChangeDetectionInhibited
      ~p_DeviceIsReadOnly:p__DeviceIsReadOnly
      ~p_DeviceIsDrive:p__DeviceIsDrive
      ~p_DeviceIsOpticalDisc:p__DeviceIsOpticalDisc
      ~p_DeviceIsMounted:p__DeviceIsMounted
      ~p_DeviceMountPaths:p__DeviceMountPaths
      ~p_DeviceMountedByUid:p__DeviceMountedByUid
      ~p_DeviceIsLuks:p__DeviceIsLuks
      ~p_DeviceIsLuksCleartext:p__DeviceIsLuksCleartext
      ~p_DeviceIsLinuxMdComponent:p__DeviceIsLinuxMdComponent
      ~p_DeviceIsLinuxMd:p__DeviceIsLinuxMd
      ~p_DeviceIsLinuxLvm2LV:p__DeviceIsLinuxLvm2LV
      ~p_DeviceIsLinuxLvm2PV:p__DeviceIsLinuxLvm2PV
      ~p_DeviceIsLinuxDmmpComponent:p__DeviceIsLinuxDmmpComponent
      ~p_DeviceIsLinuxDmmp:p__DeviceIsLinuxDmmp
      ~p_DeviceIsLinuxLoop:p__DeviceIsLinuxLoop
      ~p_DeviceSize:p__DeviceSize
      ~p_DeviceBlockSize:p__DeviceBlockSize
      ~p_DevicePresentationHide:p__DevicePresentationHide
      ~p_DevicePresentationNopolicy:p__DevicePresentationNopolicy
      ~p_DevicePresentationName:p__DevicePresentationName
      ~p_DevicePresentationIconName:p__DevicePresentationIconName
      ~p_JobInProgress:p__JobInProgress
      ~p_JobId:p__JobId
      ~p_JobInitiatedByUid:p__JobInitiatedByUid
      ~p_JobIsCancellable:p__JobIsCancellable
      ~p_JobPercentage:p__JobPercentage
      ~p_IdUsage:p__IdUsage
      ~p_IdType:p__IdType
      ~p_IdVersion:p__IdVersion
      ~p_IdUuid:p__IdUuid
      ~p_IdLabel:p__IdLabel
      ~p_LuksHolder:p__LuksHolder
      ~p_LuksCleartextSlave:p__LuksCleartextSlave
      ~p_LuksCleartextUnlockedByUid:p__LuksCleartextUnlockedByUid
      ~p_PartitionSlave:p__PartitionSlave
      ~p_PartitionScheme:p__PartitionScheme
      ~p_PartitionType:p__PartitionType
      ~p_PartitionLabel:p__PartitionLabel
      ~p_PartitionUuid:p__PartitionUuid
      ~p_PartitionFlags:p__PartitionFlags
      ~p_PartitionNumber:p__PartitionNumber
      ~p_PartitionOffset:p__PartitionOffset
      ~p_PartitionSize:p__PartitionSize
      ~p_PartitionAlignmentOffset:p__PartitionAlignmentOffset
      ~p_PartitionTableScheme:p__PartitionTableScheme
      ~p_PartitionTableCount:p__PartitionTableCount
      ~p_DriveVendor:p__DriveVendor
      ~p_DriveModel:p__DriveModel
      ~p_DriveRevision:p__DriveRevision
      ~p_DriveSerial:p__DriveSerial
      ~p_DriveWwn:p__DriveWwn
      ~p_DriveRotationRate:p__DriveRotationRate
      ~p_DriveWriteCache:p__DriveWriteCache
      ~p_DriveConnectionInterface:p__DriveConnectionInterface
      ~p_DriveConnectionSpeed:p__DriveConnectionSpeed
      ~p_DriveMediaCompatibility:p__DriveMediaCompatibility
      ~p_DriveMedia:p__DriveMedia
      ~p_DriveIsMediaEjectable:p__DriveIsMediaEjectable
      ~p_DriveCanDetach:p__DriveCanDetach
      ~p_DriveCanSpindown:p__DriveCanSpindown
      ~p_DriveIsRotational:p__DriveIsRotational
      ~p_DriveAdapter:p__DriveAdapter
      ~p_DrivePorts:p__DrivePorts
      ~p_DriveSimilarDevices:p__DriveSimilarDevices
      ~p_OpticalDiscIsBlank:p__OpticalDiscIsBlank
      ~p_OpticalDiscIsAppendable:p__OpticalDiscIsAppendable
      ~p_OpticalDiscIsClosed:p__OpticalDiscIsClosed
      ~p_OpticalDiscNumTracks:p__OpticalDiscNumTracks
      ~p_OpticalDiscNumAudioTracks:p__OpticalDiscNumAudioTracks
      ~p_OpticalDiscNumSessions:p__OpticalDiscNumSessions
      ~p_DriveAtaSmartIsAvailable:p__DriveAtaSmartIsAvailable
      ~p_DriveAtaSmartTimeCollected:p__DriveAtaSmartTimeCollected
      ~p_DriveAtaSmartStatus:p__DriveAtaSmartStatus
      ~p_DriveAtaSmartBlob:p__DriveAtaSmartBlob
      ~p_LinuxMdComponentLevel:p__LinuxMdComponentLevel
      ~p_LinuxMdComponentPosition:p__LinuxMdComponentPosition
      ~p_LinuxMdComponentNumRaidDevices:p__LinuxMdComponentNumRaidDevices
      ~p_LinuxMdComponentUuid:p__LinuxMdComponentUuid
      ~p_LinuxMdComponentName:p__LinuxMdComponentName
      ~p_LinuxMdComponentHomeHost:p__LinuxMdComponentHomeHost
      ~p_LinuxMdComponentVersion:p__LinuxMdComponentVersion
      ~p_LinuxMdComponentHolder:p__LinuxMdComponentHolder
      ~p_LinuxMdComponentState:p__LinuxMdComponentState
      ~p_LinuxMdState:p__LinuxMdState
      ~p_LinuxMdLevel:p__LinuxMdLevel
      ~p_LinuxMdUuid:p__LinuxMdUuid
      ~p_LinuxMdHomeHost:p__LinuxMdHomeHost
      ~p_LinuxMdName:p__LinuxMdName
      ~p_LinuxMdNumRaidDevices:p__LinuxMdNumRaidDevices
      ~p_LinuxMdVersion:p__LinuxMdVersion
      ~p_LinuxMdSlaves:p__LinuxMdSlaves
      ~p_LinuxMdIsDegraded:p__LinuxMdIsDegraded
      ~p_LinuxMdSyncAction:p__LinuxMdSyncAction
      ~p_LinuxMdSyncPercentage:p__LinuxMdSyncPercentage
      ~p_LinuxMdSyncSpeed:p__LinuxMdSyncSpeed
      ~p_LinuxLvm2PVUuid:p__LinuxLvm2PVUuid
      ~p_LinuxLvm2PVNumMetadataAreas:p__LinuxLvm2PVNumMetadataAreas
      ~p_LinuxLvm2PVGroupName:p__LinuxLvm2PVGroupName
      ~p_LinuxLvm2PVGroupUuid:p__LinuxLvm2PVGroupUuid
      ~p_LinuxLvm2PVGroupSize:p__LinuxLvm2PVGroupSize
      ~p_LinuxLvm2PVGroupUnallocatedSize:p__LinuxLvm2PVGroupUnallocatedSize
      ~p_LinuxLvm2PVGroupSequenceNumber:p__LinuxLvm2PVGroupSequenceNumber
      ~p_LinuxLvm2PVGroupExtentSize:p__LinuxLvm2PVGroupExtentSize
      ~p_LinuxLvm2PVGroupPhysicalVolumes:p__LinuxLvm2PVGroupPhysicalVolumes
      ~p_LinuxLvm2PVGroupLogicalVolumes:p__LinuxLvm2PVGroupLogicalVolumes
      ~p_LinuxLvm2LVName:p__LinuxLvm2LVName
      ~p_LinuxLvm2LVUuid:p__LinuxLvm2LVUuid
      ~p_LinuxLvm2LVGroupName:p__LinuxLvm2LVGroupName
      ~p_LinuxLvm2LVGroupUuid:p__LinuxLvm2LVGroupUuid
      ~p_LinuxDmmpComponentHolder:p__LinuxDmmpComponentHolder
      ~p_LinuxDmmpName:p__LinuxDmmpName
      ~p_LinuxDmmpSlaves:p__LinuxDmmpSlaves
      ~p_LinuxDmmpParameters:p__LinuxDmmpParameters
      ~p_LinuxLoopFilename:p__LinuxLoopFilename
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_JobCancel m__JobCancel;
        method_info m_PartitionTableCreate m__PartitionTableCreate;
        method_info m_PartitionDelete m__PartitionDelete;
        method_info m_PartitionCreate m__PartitionCreate;
        method_info m_PartitionModify m__PartitionModify;
        method_info m_FilesystemCreate m__FilesystemCreate;
        method_info m_FilesystemSetLabel m__FilesystemSetLabel;
        method_info m_FilesystemMount m__FilesystemMount;
        method_info m_FilesystemUnmount m__FilesystemUnmount;
        method_info m_FilesystemCheck m__FilesystemCheck;
        method_info m_FilesystemListOpenFiles m__FilesystemListOpenFiles;
        method_info m_LuksUnlock m__LuksUnlock;
        method_info m_LuksLock m__LuksLock;
        method_info m_LuksChangePassphrase m__LuksChangePassphrase;
        method_info m_LinuxMdAddSpare m__LinuxMdAddSpare;
        method_info m_LinuxMdExpand m__LinuxMdExpand;
        method_info m_LinuxMdRemoveComponent m__LinuxMdRemoveComponent;
        method_info m_LinuxMdStop m__LinuxMdStop;
        method_info m_LinuxLvm2LVStop m__LinuxLvm2LVStop;
        method_info m_LinuxMdCheck m__LinuxMdCheck;
        method_info m_DriveInhibitPolling m__DriveInhibitPolling;
        method_info m_DriveUninhibitPolling m__DriveUninhibitPolling;
        method_info m_DrivePollMedia m__DrivePollMedia;
        method_info m_DriveEject m__DriveEject;
        method_info m_DriveDetach m__DriveDetach;
        method_info m_DriveSetSpindownTimeout m__DriveSetSpindownTimeout;
        method_info m_DriveUnsetSpindownTimeout m__DriveUnsetSpindownTimeout;
        method_info m_DriveAtaSmartRefreshData m__DriveAtaSmartRefreshData;
        method_info m_DriveAtaSmartInitiateSelftest m__DriveAtaSmartInitiateSelftest;
        method_info m_DriveBenchmark m__DriveBenchmark;
      |]
      [|
        signal_info s_Changed;
        signal_info s_JobChanged;
      |]
      [|
        property_r_info p_NativePath p__NativePath;
        property_r_info p_DeviceDetectionTime p__DeviceDetectionTime;
        property_r_info p_DeviceMediaDetectionTime p__DeviceMediaDetectionTime;
        property_r_info p_DeviceMajor p__DeviceMajor;
        property_r_info p_DeviceMinor p__DeviceMinor;
        property_r_info p_DeviceFile p__DeviceFile;
        property_r_info p_DeviceFilePresentation p__DeviceFilePresentation;
        property_r_info p_DeviceFileById p__DeviceFileById;
        property_r_info p_DeviceFileByPath p__DeviceFileByPath;
        property_r_info p_DeviceIsSystemInternal p__DeviceIsSystemInternal;
        property_r_info p_DeviceIsPartition p__DeviceIsPartition;
        property_r_info p_DeviceIsPartitionTable p__DeviceIsPartitionTable;
        property_r_info p_DeviceIsRemovable p__DeviceIsRemovable;
        property_r_info p_DeviceIsMediaAvailable p__DeviceIsMediaAvailable;
        property_r_info p_DeviceIsMediaChangeDetected p__DeviceIsMediaChangeDetected;
        property_r_info p_DeviceIsMediaChangeDetectionPolling p__DeviceIsMediaChangeDetectionPolling;
        property_r_info p_DeviceIsMediaChangeDetectionInhibitable p__DeviceIsMediaChangeDetectionInhibitable;
        property_r_info p_DeviceIsMediaChangeDetectionInhibited p__DeviceIsMediaChangeDetectionInhibited;
        property_r_info p_DeviceIsReadOnly p__DeviceIsReadOnly;
        property_r_info p_DeviceIsDrive p__DeviceIsDrive;
        property_r_info p_DeviceIsOpticalDisc p__DeviceIsOpticalDisc;
        property_r_info p_DeviceIsMounted p__DeviceIsMounted;
        property_r_info p_DeviceMountPaths p__DeviceMountPaths;
        property_r_info p_DeviceMountedByUid p__DeviceMountedByUid;
        property_r_info p_DeviceIsLuks p__DeviceIsLuks;
        property_r_info p_DeviceIsLuksCleartext p__DeviceIsLuksCleartext;
        property_r_info p_DeviceIsLinuxMdComponent p__DeviceIsLinuxMdComponent;
        property_r_info p_DeviceIsLinuxMd p__DeviceIsLinuxMd;
        property_r_info p_DeviceIsLinuxLvm2LV p__DeviceIsLinuxLvm2LV;
        property_r_info p_DeviceIsLinuxLvm2PV p__DeviceIsLinuxLvm2PV;
        property_r_info p_DeviceIsLinuxDmmpComponent p__DeviceIsLinuxDmmpComponent;
        property_r_info p_DeviceIsLinuxDmmp p__DeviceIsLinuxDmmp;
        property_r_info p_DeviceIsLinuxLoop p__DeviceIsLinuxLoop;
        property_r_info p_DeviceSize p__DeviceSize;
        property_r_info p_DeviceBlockSize p__DeviceBlockSize;
        property_r_info p_DevicePresentationHide p__DevicePresentationHide;
        property_r_info p_DevicePresentationNopolicy p__DevicePresentationNopolicy;
        property_r_info p_DevicePresentationName p__DevicePresentationName;
        property_r_info p_DevicePresentationIconName p__DevicePresentationIconName;
        property_r_info p_JobInProgress p__JobInProgress;
        property_r_info p_JobId p__JobId;
        property_r_info p_JobInitiatedByUid p__JobInitiatedByUid;
        property_r_info p_JobIsCancellable p__JobIsCancellable;
        property_r_info p_JobPercentage p__JobPercentage;
        property_r_info p_IdUsage p__IdUsage;
        property_r_info p_IdType p__IdType;
        property_r_info p_IdVersion p__IdVersion;
        property_r_info p_IdUuid p__IdUuid;
        property_r_info p_IdLabel p__IdLabel;
        property_r_info p_LuksHolder p__LuksHolder;
        property_r_info p_LuksCleartextSlave p__LuksCleartextSlave;
        property_r_info p_LuksCleartextUnlockedByUid p__LuksCleartextUnlockedByUid;
        property_r_info p_PartitionSlave p__PartitionSlave;
        property_r_info p_PartitionScheme p__PartitionScheme;
        property_r_info p_PartitionType p__PartitionType;
        property_r_info p_PartitionLabel p__PartitionLabel;
        property_r_info p_PartitionUuid p__PartitionUuid;
        property_r_info p_PartitionFlags p__PartitionFlags;
        property_r_info p_PartitionNumber p__PartitionNumber;
        property_r_info p_PartitionOffset p__PartitionOffset;
        property_r_info p_PartitionSize p__PartitionSize;
        property_r_info p_PartitionAlignmentOffset p__PartitionAlignmentOffset;
        property_r_info p_PartitionTableScheme p__PartitionTableScheme;
        property_r_info p_PartitionTableCount p__PartitionTableCount;
        property_r_info p_DriveVendor p__DriveVendor;
        property_r_info p_DriveModel p__DriveModel;
        property_r_info p_DriveRevision p__DriveRevision;
        property_r_info p_DriveSerial p__DriveSerial;
        property_r_info p_DriveWwn p__DriveWwn;
        property_r_info p_DriveRotationRate p__DriveRotationRate;
        property_r_info p_DriveWriteCache p__DriveWriteCache;
        property_r_info p_DriveConnectionInterface p__DriveConnectionInterface;
        property_r_info p_DriveConnectionSpeed p__DriveConnectionSpeed;
        property_r_info p_DriveMediaCompatibility p__DriveMediaCompatibility;
        property_r_info p_DriveMedia p__DriveMedia;
        property_r_info p_DriveIsMediaEjectable p__DriveIsMediaEjectable;
        property_r_info p_DriveCanDetach p__DriveCanDetach;
        property_r_info p_DriveCanSpindown p__DriveCanSpindown;
        property_r_info p_DriveIsRotational p__DriveIsRotational;
        property_r_info p_DriveAdapter p__DriveAdapter;
        property_r_info p_DrivePorts p__DrivePorts;
        property_r_info p_DriveSimilarDevices p__DriveSimilarDevices;
        property_r_info p_OpticalDiscIsBlank p__OpticalDiscIsBlank;
        property_r_info p_OpticalDiscIsAppendable p__OpticalDiscIsAppendable;
        property_r_info p_OpticalDiscIsClosed p__OpticalDiscIsClosed;
        property_r_info p_OpticalDiscNumTracks p__OpticalDiscNumTracks;
        property_r_info p_OpticalDiscNumAudioTracks p__OpticalDiscNumAudioTracks;
        property_r_info p_OpticalDiscNumSessions p__OpticalDiscNumSessions;
        property_r_info p_DriveAtaSmartIsAvailable p__DriveAtaSmartIsAvailable;
        property_r_info p_DriveAtaSmartTimeCollected p__DriveAtaSmartTimeCollected;
        property_r_info p_DriveAtaSmartStatus p__DriveAtaSmartStatus;
        property_r_info p_DriveAtaSmartBlob p__DriveAtaSmartBlob;
        property_r_info p_LinuxMdComponentLevel p__LinuxMdComponentLevel;
        property_r_info p_LinuxMdComponentPosition p__LinuxMdComponentPosition;
        property_r_info p_LinuxMdComponentNumRaidDevices p__LinuxMdComponentNumRaidDevices;
        property_r_info p_LinuxMdComponentUuid p__LinuxMdComponentUuid;
        property_r_info p_LinuxMdComponentName p__LinuxMdComponentName;
        property_r_info p_LinuxMdComponentHomeHost p__LinuxMdComponentHomeHost;
        property_r_info p_LinuxMdComponentVersion p__LinuxMdComponentVersion;
        property_r_info p_LinuxMdComponentHolder p__LinuxMdComponentHolder;
        property_r_info p_LinuxMdComponentState p__LinuxMdComponentState;
        property_r_info p_LinuxMdState p__LinuxMdState;
        property_r_info p_LinuxMdLevel p__LinuxMdLevel;
        property_r_info p_LinuxMdUuid p__LinuxMdUuid;
        property_r_info p_LinuxMdHomeHost p__LinuxMdHomeHost;
        property_r_info p_LinuxMdName p__LinuxMdName;
        property_r_info p_LinuxMdNumRaidDevices p__LinuxMdNumRaidDevices;
        property_r_info p_LinuxMdVersion p__LinuxMdVersion;
        property_r_info p_LinuxMdSlaves p__LinuxMdSlaves;
        property_r_info p_LinuxMdIsDegraded p__LinuxMdIsDegraded;
        property_r_info p_LinuxMdSyncAction p__LinuxMdSyncAction;
        property_r_info p_LinuxMdSyncPercentage p__LinuxMdSyncPercentage;
        property_r_info p_LinuxMdSyncSpeed p__LinuxMdSyncSpeed;
        property_r_info p_LinuxLvm2PVUuid p__LinuxLvm2PVUuid;
        property_r_info p_LinuxLvm2PVNumMetadataAreas p__LinuxLvm2PVNumMetadataAreas;
        property_r_info p_LinuxLvm2PVGroupName p__LinuxLvm2PVGroupName;
        property_r_info p_LinuxLvm2PVGroupUuid p__LinuxLvm2PVGroupUuid;
        property_r_info p_LinuxLvm2PVGroupSize p__LinuxLvm2PVGroupSize;
        property_r_info p_LinuxLvm2PVGroupUnallocatedSize p__LinuxLvm2PVGroupUnallocatedSize;
        property_r_info p_LinuxLvm2PVGroupSequenceNumber p__LinuxLvm2PVGroupSequenceNumber;
        property_r_info p_LinuxLvm2PVGroupExtentSize p__LinuxLvm2PVGroupExtentSize;
        property_r_info p_LinuxLvm2PVGroupPhysicalVolumes p__LinuxLvm2PVGroupPhysicalVolumes;
        property_r_info p_LinuxLvm2PVGroupLogicalVolumes p__LinuxLvm2PVGroupLogicalVolumes;
        property_r_info p_LinuxLvm2LVName p__LinuxLvm2LVName;
        property_r_info p_LinuxLvm2LVUuid p__LinuxLvm2LVUuid;
        property_r_info p_LinuxLvm2LVGroupName p__LinuxLvm2LVGroupName;
        property_r_info p_LinuxLvm2LVGroupUuid p__LinuxLvm2LVGroupUuid;
        property_r_info p_LinuxDmmpComponentHolder p__LinuxDmmpComponentHolder;
        property_r_info p_LinuxDmmpName p__LinuxDmmpName;
        property_r_info p_LinuxDmmpSlaves p__LinuxDmmpSlaves;
        property_r_info p_LinuxDmmpParameters p__LinuxDmmpParameters;
        property_r_info p_LinuxLoopFilename p__LinuxLoopFilename;
      |]
end
module Org_freedesktop_UDisks_Expander =
struct
  let interface = "org.freedesktop.UDisks.Expander"
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let p_NativePath = {
    Property.interface = interface;
    Property.member = "NativePath";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Vendor = {
    Property.interface = interface;
    Property.member = "Vendor";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Model = {
    Property.interface = interface;
    Property.member = "Model";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Revision = {
    Property.interface = interface;
    Property.member = "Revision";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_NumPorts = {
    Property.interface = interface;
    Property.member = "NumPorts";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_UpstreamPorts = {
    Property.interface = interface;
    Property.member = "UpstreamPorts";
    Property.typ = array basic_object_path;
    Property.access = Property.readable;
  }
  let p_Adapter = {
    Property.interface = interface;
    Property.member = "Adapter";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode
      ~p_NativePath:p__NativePath
      ~p_Vendor:p__Vendor
      ~p_Model:p__Model
      ~p_Revision:p__Revision
      ~p_NumPorts:p__NumPorts
      ~p_UpstreamPorts:p__UpstreamPorts
      ~p_Adapter:p__Adapter
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
      |]
      [|
        signal_info s_Changed;
      |]
      [|
        property_r_info p_NativePath p__NativePath;
        property_r_info p_Vendor p__Vendor;
        property_r_info p_Model p__Model;
        property_r_info p_Revision p__Revision;
        property_r_info p_NumPorts p__NumPorts;
        property_r_info p_UpstreamPorts p__UpstreamPorts;
        property_r_info p_Adapter p__Adapter;
      |]
end
module Org_freedesktop_UDisks_Port =
struct
  let interface = "org.freedesktop.UDisks.Port"
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let p_NativePath = {
    Property.interface = interface;
    Property.member = "NativePath";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Adapter = {
    Property.interface = interface;
    Property.member = "Adapter";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_Parent = {
    Property.interface = interface;
    Property.member = "Parent";
    Property.typ = basic_object_path;
    Property.access = Property.readable;
  }
  let p_Number = {
    Property.interface = interface;
    Property.member = "Number";
    Property.typ = basic_int32;
    Property.access = Property.readable;
  }
  let p_ConnectorType = {
    Property.interface = interface;
    Property.member = "ConnectorType";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode
      ~p_NativePath:p__NativePath
      ~p_Adapter:p__Adapter
      ~p_Parent:p__Parent
      ~p_Number:p__Number
      ~p_ConnectorType:p__ConnectorType
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
      |]
      [|
        signal_info s_Changed;
      |]
      [|
        property_r_info p_NativePath p__NativePath;
        property_r_info p_Adapter p__Adapter;
        property_r_info p_Parent p__Parent;
        property_r_info p_Number p__Number;
        property_r_info p_ConnectorType p__ConnectorType;
      |]
end
