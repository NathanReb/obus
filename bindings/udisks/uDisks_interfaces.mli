(* File auto-generated by obus_gen_interface.best, DO NOT EDIT. *)
open OBus_member
module Org_freedesktop_UDisks : sig
  val m_EnumerateAdapters : (unit, OBus_path.t list) Method.t
  val m_EnumerateExpanders : (unit, OBus_path.t list) Method.t
  val m_EnumeratePorts : (unit, OBus_path.t list) Method.t
  val m_EnumerateDevices : (unit, OBus_path.t list) Method.t
  val m_EnumerateDeviceFiles : (unit, string list) Method.t
  val m_FindDeviceByDeviceFile : (string, OBus_path.t) Method.t
  val m_FindDeviceByMajorMinor : (int64 * int64, OBus_path.t) Method.t
  val m_DriveInhibitAllPolling : (string list, string) Method.t
  val m_DriveUninhibitAllPolling : (string, unit) Method.t
  val m_DriveSetAllSpindownTimeouts : (int32 * string list, string) Method.t
  val m_DriveUnsetAllSpindownTimeouts : (string, unit) Method.t
  val m_LinuxLvm2VGStart : (string * string list, unit) Method.t
  val m_LinuxLvm2VGStop : (string * string list, unit) Method.t
  val m_LinuxLvm2VGSetName : (string * string, unit) Method.t
  val m_LinuxLvm2VGAddPV : (string * OBus_path.t * string list, unit) Method.t
  val m_LinuxLvm2VGRemovePV : (string * string * string list, unit) Method.t
  val m_LinuxLvm2LVSetName : (string * string * string, unit) Method.t
  val m_LinuxLvm2LVStart : (string * string * string list, unit) Method.t
  val m_LinuxLvm2LVRemove : (string * string * string list, unit) Method.t
  val m_LinuxLvm2LVCreate : (string * string * int64 * int32 * int64 * int32 * string list * string * string list, OBus_path.t) Method.t
  val m_LinuxMdStart : (OBus_path.t list * string list, OBus_path.t) Method.t
  val m_LinuxMdCreate : (OBus_path.t list * string * int64 * string * string list, OBus_path.t) Method.t
  val m_Inhibit : (unit, string) Method.t
  val m_Uninhibit : (string, unit) Method.t
  val s_DeviceAdded : OBus_path.t Signal.t
  val s_DeviceRemoved : OBus_path.t Signal.t
  val s_DeviceChanged : OBus_path.t Signal.t
  val s_DeviceJobChanged : (OBus_path.t * bool * bool * string * int32 * int32 * string * float) Signal.t
  val s_AdapterAdded : OBus_path.t Signal.t
  val s_AdapterRemoved : OBus_path.t Signal.t
  val s_AdapterChanged : OBus_path.t Signal.t
  val s_ExpanderAdded : OBus_path.t Signal.t
  val s_ExpanderRemoved : OBus_path.t Signal.t
  val s_ExpanderChanged : OBus_path.t Signal.t
  val s_PortAdded : OBus_path.t Signal.t
  val s_PortRemoved : OBus_path.t Signal.t
  val s_PortChanged : OBus_path.t Signal.t
  val p_DaemonVersion : (string, [ `readable ]) Property.t
  val p_DaemonIsInhibited : (bool, [ `readable ]) Property.t
  val p_SupportsLuksDevices : (bool, [ `readable ]) Property.t
  val p_KnownFilesystems : ((string * string * bool * bool * bool * int32 * bool * bool * bool * bool * bool * bool * bool * bool) list, [ `readable ]) Property.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_EnumerateAdapters : (OBus_path.t list OBus_context.t -> 'a -> unit -> OBus_path.t list Lwt.t) ->
    m_EnumerateExpanders : (OBus_path.t list OBus_context.t -> 'a -> unit -> OBus_path.t list Lwt.t) ->
    m_EnumeratePorts : (OBus_path.t list OBus_context.t -> 'a -> unit -> OBus_path.t list Lwt.t) ->
    m_EnumerateDevices : (OBus_path.t list OBus_context.t -> 'a -> unit -> OBus_path.t list Lwt.t) ->
    m_EnumerateDeviceFiles : (string list OBus_context.t -> 'a -> unit -> string list Lwt.t) ->
    m_FindDeviceByDeviceFile : (OBus_path.t OBus_context.t -> 'a -> string -> OBus_path.t Lwt.t) ->
    m_FindDeviceByMajorMinor : (OBus_path.t OBus_context.t -> 'a -> int64 * int64 -> OBus_path.t Lwt.t) ->
    m_DriveInhibitAllPolling : (string OBus_context.t -> 'a -> string list -> string Lwt.t) ->
    m_DriveUninhibitAllPolling : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_DriveSetAllSpindownTimeouts : (string OBus_context.t -> 'a -> int32 * string list -> string Lwt.t) ->
    m_DriveUnsetAllSpindownTimeouts : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_LinuxLvm2VGStart : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_LinuxLvm2VGStop : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_LinuxLvm2VGSetName : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_LinuxLvm2VGAddPV : (unit OBus_context.t -> 'a -> string * OBus_path.t * string list -> unit Lwt.t) ->
    m_LinuxLvm2VGRemovePV : (unit OBus_context.t -> 'a -> string * string * string list -> unit Lwt.t) ->
    m_LinuxLvm2LVSetName : (unit OBus_context.t -> 'a -> string * string * string -> unit Lwt.t) ->
    m_LinuxLvm2LVStart : (unit OBus_context.t -> 'a -> string * string * string list -> unit Lwt.t) ->
    m_LinuxLvm2LVRemove : (unit OBus_context.t -> 'a -> string * string * string list -> unit Lwt.t) ->
    m_LinuxLvm2LVCreate : (OBus_path.t OBus_context.t -> 'a -> string * string * int64 * int32 * int64 * int32 * string list * string * string list -> OBus_path.t Lwt.t) ->
    m_LinuxMdStart : (OBus_path.t OBus_context.t -> 'a -> OBus_path.t list * string list -> OBus_path.t Lwt.t) ->
    m_LinuxMdCreate : (OBus_path.t OBus_context.t -> 'a -> OBus_path.t list * string * int64 * string * string list -> OBus_path.t Lwt.t) ->
    m_Inhibit : (string OBus_context.t -> 'a -> unit -> string Lwt.t) ->
    m_Uninhibit : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    p_DaemonVersion : ('a -> string React.signal) ->
    p_DaemonIsInhibited : ('a -> bool React.signal) ->
    p_SupportsLuksDevices : ('a -> bool React.signal) ->
    p_KnownFilesystems : ('a -> (string * string * bool * bool * bool * int32 * bool * bool * bool * bool * bool * bool * bool * bool) list React.signal) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_UDisks_Adapter : sig
  val s_Changed : unit Signal.t
  val p_NativePath : (string, [ `readable ]) Property.t
  val p_Vendor : (string, [ `readable ]) Property.t
  val p_Model : (string, [ `readable ]) Property.t
  val p_Driver : (string, [ `readable ]) Property.t
  val p_NumPorts : (int32, [ `readable ]) Property.t
  val p_Fabric : (string, [ `readable ]) Property.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    p_NativePath : ('a -> string React.signal) ->
    p_Vendor : ('a -> string React.signal) ->
    p_Model : ('a -> string React.signal) ->
    p_Driver : ('a -> string React.signal) ->
    p_NumPorts : ('a -> int32 React.signal) ->
    p_Fabric : ('a -> string React.signal) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_UDisks_Device : sig
  val m_JobCancel : (unit, unit) Method.t
  val m_PartitionTableCreate : (string * string list, unit) Method.t
  val m_PartitionDelete : (string list, unit) Method.t
  val m_PartitionCreate : (int64 * int64 * string * string * string list * string list * string * string list, OBus_path.t) Method.t
  val m_PartitionModify : (string * string * string list, unit) Method.t
  val m_FilesystemCreate : (string * string list, unit) Method.t
  val m_FilesystemSetLabel : (string, unit) Method.t
  val m_FilesystemMount : (string * string list, string) Method.t
  val m_FilesystemUnmount : (string list, unit) Method.t
  val m_FilesystemCheck : (string list, bool) Method.t
  val m_FilesystemListOpenFiles : (unit, (int32 * int32 * string) list) Method.t
  val m_LuksUnlock : (string * string list, OBus_path.t) Method.t
  val m_LuksLock : (string list, unit) Method.t
  val m_LuksChangePassphrase : (string * string, unit) Method.t
  val m_LinuxMdAddSpare : (OBus_path.t * string list, unit) Method.t
  val m_LinuxMdExpand : (OBus_path.t list * string list, unit) Method.t
  val m_LinuxMdRemoveComponent : (OBus_path.t * string list, unit) Method.t
  val m_LinuxMdStop : (string list, unit) Method.t
  val m_LinuxLvm2LVStop : (string list, unit) Method.t
  val m_LinuxMdCheck : (string list, int64) Method.t
  val m_DriveInhibitPolling : (string list, string) Method.t
  val m_DriveUninhibitPolling : (string, unit) Method.t
  val m_DrivePollMedia : (unit, unit) Method.t
  val m_DriveEject : (string list, unit) Method.t
  val m_DriveDetach : (string list, unit) Method.t
  val m_DriveSetSpindownTimeout : (int32 * string list, string) Method.t
  val m_DriveUnsetSpindownTimeout : (string, unit) Method.t
  val m_DriveAtaSmartRefreshData : (string list, unit) Method.t
  val m_DriveAtaSmartInitiateSelftest : (string * string list, unit) Method.t
  val m_DriveBenchmark : (bool * string list, (int64 * float) list * (int64 * float) list * (int64 * float) list) Method.t
  val s_Changed : unit Signal.t
  val s_JobChanged : (bool * bool * string * int32 * float) Signal.t
  val p_NativePath : (string, [ `readable ]) Property.t
  val p_DeviceDetectionTime : (int64, [ `readable ]) Property.t
  val p_DeviceMediaDetectionTime : (int64, [ `readable ]) Property.t
  val p_DeviceMajor : (int64, [ `readable ]) Property.t
  val p_DeviceMinor : (int64, [ `readable ]) Property.t
  val p_DeviceFile : (string, [ `readable ]) Property.t
  val p_DeviceFilePresentation : (string, [ `readable ]) Property.t
  val p_DeviceFileById : (string list, [ `readable ]) Property.t
  val p_DeviceFileByPath : (string list, [ `readable ]) Property.t
  val p_DeviceIsSystemInternal : (bool, [ `readable ]) Property.t
  val p_DeviceIsPartition : (bool, [ `readable ]) Property.t
  val p_DeviceIsPartitionTable : (bool, [ `readable ]) Property.t
  val p_DeviceIsRemovable : (bool, [ `readable ]) Property.t
  val p_DeviceIsMediaAvailable : (bool, [ `readable ]) Property.t
  val p_DeviceIsMediaChangeDetected : (bool, [ `readable ]) Property.t
  val p_DeviceIsMediaChangeDetectionPolling : (bool, [ `readable ]) Property.t
  val p_DeviceIsMediaChangeDetectionInhibitable : (bool, [ `readable ]) Property.t
  val p_DeviceIsMediaChangeDetectionInhibited : (bool, [ `readable ]) Property.t
  val p_DeviceIsReadOnly : (bool, [ `readable ]) Property.t
  val p_DeviceIsDrive : (bool, [ `readable ]) Property.t
  val p_DeviceIsOpticalDisc : (bool, [ `readable ]) Property.t
  val p_DeviceIsMounted : (bool, [ `readable ]) Property.t
  val p_DeviceMountPaths : (string list, [ `readable ]) Property.t
  val p_DeviceMountedByUid : (int32, [ `readable ]) Property.t
  val p_DeviceIsLuks : (bool, [ `readable ]) Property.t
  val p_DeviceIsLuksCleartext : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxMdComponent : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxMd : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxLvm2LV : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxLvm2PV : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxDmmpComponent : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxDmmp : (bool, [ `readable ]) Property.t
  val p_DeviceIsLinuxLoop : (bool, [ `readable ]) Property.t
  val p_DeviceSize : (int64, [ `readable ]) Property.t
  val p_DeviceBlockSize : (int64, [ `readable ]) Property.t
  val p_DevicePresentationHide : (bool, [ `readable ]) Property.t
  val p_DevicePresentationNopolicy : (bool, [ `readable ]) Property.t
  val p_DevicePresentationName : (string, [ `readable ]) Property.t
  val p_DevicePresentationIconName : (string, [ `readable ]) Property.t
  val p_JobInProgress : (bool, [ `readable ]) Property.t
  val p_JobId : (string, [ `readable ]) Property.t
  val p_JobInitiatedByUid : (int32, [ `readable ]) Property.t
  val p_JobIsCancellable : (bool, [ `readable ]) Property.t
  val p_JobPercentage : (float, [ `readable ]) Property.t
  val p_IdUsage : (string, [ `readable ]) Property.t
  val p_IdType : (string, [ `readable ]) Property.t
  val p_IdVersion : (string, [ `readable ]) Property.t
  val p_IdUuid : (string, [ `readable ]) Property.t
  val p_IdLabel : (string, [ `readable ]) Property.t
  val p_LuksHolder : (OBus_path.t, [ `readable ]) Property.t
  val p_LuksCleartextSlave : (OBus_path.t, [ `readable ]) Property.t
  val p_LuksCleartextUnlockedByUid : (int32, [ `readable ]) Property.t
  val p_PartitionSlave : (OBus_path.t, [ `readable ]) Property.t
  val p_PartitionScheme : (string, [ `readable ]) Property.t
  val p_PartitionType : (string, [ `readable ]) Property.t
  val p_PartitionLabel : (string, [ `readable ]) Property.t
  val p_PartitionUuid : (string, [ `readable ]) Property.t
  val p_PartitionFlags : (string list, [ `readable ]) Property.t
  val p_PartitionNumber : (int32, [ `readable ]) Property.t
  val p_PartitionOffset : (int64, [ `readable ]) Property.t
  val p_PartitionSize : (int64, [ `readable ]) Property.t
  val p_PartitionAlignmentOffset : (int64, [ `readable ]) Property.t
  val p_PartitionTableScheme : (string, [ `readable ]) Property.t
  val p_PartitionTableCount : (int32, [ `readable ]) Property.t
  val p_DriveVendor : (string, [ `readable ]) Property.t
  val p_DriveModel : (string, [ `readable ]) Property.t
  val p_DriveRevision : (string, [ `readable ]) Property.t
  val p_DriveSerial : (string, [ `readable ]) Property.t
  val p_DriveWwn : (string, [ `readable ]) Property.t
  val p_DriveRotationRate : (int32, [ `readable ]) Property.t
  val p_DriveWriteCache : (string, [ `readable ]) Property.t
  val p_DriveConnectionInterface : (string, [ `readable ]) Property.t
  val p_DriveConnectionSpeed : (int64, [ `readable ]) Property.t
  val p_DriveMediaCompatibility : (string list, [ `readable ]) Property.t
  val p_DriveMedia : (string, [ `readable ]) Property.t
  val p_DriveIsMediaEjectable : (bool, [ `readable ]) Property.t
  val p_DriveCanDetach : (bool, [ `readable ]) Property.t
  val p_DriveCanSpindown : (bool, [ `readable ]) Property.t
  val p_DriveIsRotational : (bool, [ `readable ]) Property.t
  val p_DriveAdapter : (OBus_path.t, [ `readable ]) Property.t
  val p_DrivePorts : (OBus_path.t list, [ `readable ]) Property.t
  val p_DriveSimilarDevices : (OBus_path.t list, [ `readable ]) Property.t
  val p_OpticalDiscIsBlank : (bool, [ `readable ]) Property.t
  val p_OpticalDiscIsAppendable : (bool, [ `readable ]) Property.t
  val p_OpticalDiscIsClosed : (bool, [ `readable ]) Property.t
  val p_OpticalDiscNumTracks : (int32, [ `readable ]) Property.t
  val p_OpticalDiscNumAudioTracks : (int32, [ `readable ]) Property.t
  val p_OpticalDiscNumSessions : (int32, [ `readable ]) Property.t
  val p_DriveAtaSmartIsAvailable : (bool, [ `readable ]) Property.t
  val p_DriveAtaSmartTimeCollected : (int64, [ `readable ]) Property.t
  val p_DriveAtaSmartStatus : (string, [ `readable ]) Property.t
  val p_DriveAtaSmartBlob : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentLevel : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentPosition : (int32, [ `readable ]) Property.t
  val p_LinuxMdComponentNumRaidDevices : (int32, [ `readable ]) Property.t
  val p_LinuxMdComponentUuid : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentName : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentHomeHost : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentVersion : (string, [ `readable ]) Property.t
  val p_LinuxMdComponentHolder : (OBus_path.t, [ `readable ]) Property.t
  val p_LinuxMdComponentState : (string list, [ `readable ]) Property.t
  val p_LinuxMdState : (string, [ `readable ]) Property.t
  val p_LinuxMdLevel : (string, [ `readable ]) Property.t
  val p_LinuxMdUuid : (string, [ `readable ]) Property.t
  val p_LinuxMdHomeHost : (string, [ `readable ]) Property.t
  val p_LinuxMdName : (string, [ `readable ]) Property.t
  val p_LinuxMdNumRaidDevices : (int32, [ `readable ]) Property.t
  val p_LinuxMdVersion : (string, [ `readable ]) Property.t
  val p_LinuxMdSlaves : (OBus_path.t list, [ `readable ]) Property.t
  val p_LinuxMdIsDegraded : (bool, [ `readable ]) Property.t
  val p_LinuxMdSyncAction : (string, [ `readable ]) Property.t
  val p_LinuxMdSyncPercentage : (float, [ `readable ]) Property.t
  val p_LinuxMdSyncSpeed : (int64, [ `readable ]) Property.t
  val p_LinuxLvm2PVUuid : (string, [ `readable ]) Property.t
  val p_LinuxLvm2PVNumMetadataAreas : (int32, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupName : (string, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupUuid : (string, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupSize : (int64, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupUnallocatedSize : (int64, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupSequenceNumber : (int64, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupExtentSize : (int64, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupPhysicalVolumes : (string list, [ `readable ]) Property.t
  val p_LinuxLvm2PVGroupLogicalVolumes : (string list, [ `readable ]) Property.t
  val p_LinuxLvm2LVName : (string, [ `readable ]) Property.t
  val p_LinuxLvm2LVUuid : (string, [ `readable ]) Property.t
  val p_LinuxLvm2LVGroupName : (string, [ `readable ]) Property.t
  val p_LinuxLvm2LVGroupUuid : (string, [ `readable ]) Property.t
  val p_LinuxDmmpComponentHolder : (OBus_path.t, [ `readable ]) Property.t
  val p_LinuxDmmpName : (string, [ `readable ]) Property.t
  val p_LinuxDmmpSlaves : (OBus_path.t list, [ `readable ]) Property.t
  val p_LinuxDmmpParameters : (string, [ `readable ]) Property.t
  val p_LinuxLoopFilename : (string, [ `readable ]) Property.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_JobCancel : (unit OBus_context.t -> 'a -> unit -> unit Lwt.t) ->
    m_PartitionTableCreate : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_PartitionDelete : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_PartitionCreate : (OBus_path.t OBus_context.t -> 'a -> int64 * int64 * string * string * string list * string list * string * string list -> OBus_path.t Lwt.t) ->
    m_PartitionModify : (unit OBus_context.t -> 'a -> string * string * string list -> unit Lwt.t) ->
    m_FilesystemCreate : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_FilesystemSetLabel : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_FilesystemMount : (string OBus_context.t -> 'a -> string * string list -> string Lwt.t) ->
    m_FilesystemUnmount : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_FilesystemCheck : (bool OBus_context.t -> 'a -> string list -> bool Lwt.t) ->
    m_FilesystemListOpenFiles : ((int32 * int32 * string) list OBus_context.t -> 'a -> unit -> (int32 * int32 * string) list Lwt.t) ->
    m_LuksUnlock : (OBus_path.t OBus_context.t -> 'a -> string * string list -> OBus_path.t Lwt.t) ->
    m_LuksLock : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_LuksChangePassphrase : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_LinuxMdAddSpare : (unit OBus_context.t -> 'a -> OBus_path.t * string list -> unit Lwt.t) ->
    m_LinuxMdExpand : (unit OBus_context.t -> 'a -> OBus_path.t list * string list -> unit Lwt.t) ->
    m_LinuxMdRemoveComponent : (unit OBus_context.t -> 'a -> OBus_path.t * string list -> unit Lwt.t) ->
    m_LinuxMdStop : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_LinuxLvm2LVStop : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_LinuxMdCheck : (int64 OBus_context.t -> 'a -> string list -> int64 Lwt.t) ->
    m_DriveInhibitPolling : (string OBus_context.t -> 'a -> string list -> string Lwt.t) ->
    m_DriveUninhibitPolling : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_DrivePollMedia : (unit OBus_context.t -> 'a -> unit -> unit Lwt.t) ->
    m_DriveEject : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_DriveDetach : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_DriveSetSpindownTimeout : (string OBus_context.t -> 'a -> int32 * string list -> string Lwt.t) ->
    m_DriveUnsetSpindownTimeout : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_DriveAtaSmartRefreshData : (unit OBus_context.t -> 'a -> string list -> unit Lwt.t) ->
    m_DriveAtaSmartInitiateSelftest : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_DriveBenchmark : (((int64 * float) list * (int64 * float) list * (int64 * float) list) OBus_context.t -> 'a -> bool * string list -> ((int64 * float) list * (int64 * float) list * (int64 * float) list) Lwt.t) ->
    p_NativePath : ('a -> string React.signal) ->
    p_DeviceDetectionTime : ('a -> int64 React.signal) ->
    p_DeviceMediaDetectionTime : ('a -> int64 React.signal) ->
    p_DeviceMajor : ('a -> int64 React.signal) ->
    p_DeviceMinor : ('a -> int64 React.signal) ->
    p_DeviceFile : ('a -> string React.signal) ->
    p_DeviceFilePresentation : ('a -> string React.signal) ->
    p_DeviceFileById : ('a -> string list React.signal) ->
    p_DeviceFileByPath : ('a -> string list React.signal) ->
    p_DeviceIsSystemInternal : ('a -> bool React.signal) ->
    p_DeviceIsPartition : ('a -> bool React.signal) ->
    p_DeviceIsPartitionTable : ('a -> bool React.signal) ->
    p_DeviceIsRemovable : ('a -> bool React.signal) ->
    p_DeviceIsMediaAvailable : ('a -> bool React.signal) ->
    p_DeviceIsMediaChangeDetected : ('a -> bool React.signal) ->
    p_DeviceIsMediaChangeDetectionPolling : ('a -> bool React.signal) ->
    p_DeviceIsMediaChangeDetectionInhibitable : ('a -> bool React.signal) ->
    p_DeviceIsMediaChangeDetectionInhibited : ('a -> bool React.signal) ->
    p_DeviceIsReadOnly : ('a -> bool React.signal) ->
    p_DeviceIsDrive : ('a -> bool React.signal) ->
    p_DeviceIsOpticalDisc : ('a -> bool React.signal) ->
    p_DeviceIsMounted : ('a -> bool React.signal) ->
    p_DeviceMountPaths : ('a -> string list React.signal) ->
    p_DeviceMountedByUid : ('a -> int32 React.signal) ->
    p_DeviceIsLuks : ('a -> bool React.signal) ->
    p_DeviceIsLuksCleartext : ('a -> bool React.signal) ->
    p_DeviceIsLinuxMdComponent : ('a -> bool React.signal) ->
    p_DeviceIsLinuxMd : ('a -> bool React.signal) ->
    p_DeviceIsLinuxLvm2LV : ('a -> bool React.signal) ->
    p_DeviceIsLinuxLvm2PV : ('a -> bool React.signal) ->
    p_DeviceIsLinuxDmmpComponent : ('a -> bool React.signal) ->
    p_DeviceIsLinuxDmmp : ('a -> bool React.signal) ->
    p_DeviceIsLinuxLoop : ('a -> bool React.signal) ->
    p_DeviceSize : ('a -> int64 React.signal) ->
    p_DeviceBlockSize : ('a -> int64 React.signal) ->
    p_DevicePresentationHide : ('a -> bool React.signal) ->
    p_DevicePresentationNopolicy : ('a -> bool React.signal) ->
    p_DevicePresentationName : ('a -> string React.signal) ->
    p_DevicePresentationIconName : ('a -> string React.signal) ->
    p_JobInProgress : ('a -> bool React.signal) ->
    p_JobId : ('a -> string React.signal) ->
    p_JobInitiatedByUid : ('a -> int32 React.signal) ->
    p_JobIsCancellable : ('a -> bool React.signal) ->
    p_JobPercentage : ('a -> float React.signal) ->
    p_IdUsage : ('a -> string React.signal) ->
    p_IdType : ('a -> string React.signal) ->
    p_IdVersion : ('a -> string React.signal) ->
    p_IdUuid : ('a -> string React.signal) ->
    p_IdLabel : ('a -> string React.signal) ->
    p_LuksHolder : ('a -> OBus_path.t React.signal) ->
    p_LuksCleartextSlave : ('a -> OBus_path.t React.signal) ->
    p_LuksCleartextUnlockedByUid : ('a -> int32 React.signal) ->
    p_PartitionSlave : ('a -> OBus_path.t React.signal) ->
    p_PartitionScheme : ('a -> string React.signal) ->
    p_PartitionType : ('a -> string React.signal) ->
    p_PartitionLabel : ('a -> string React.signal) ->
    p_PartitionUuid : ('a -> string React.signal) ->
    p_PartitionFlags : ('a -> string list React.signal) ->
    p_PartitionNumber : ('a -> int32 React.signal) ->
    p_PartitionOffset : ('a -> int64 React.signal) ->
    p_PartitionSize : ('a -> int64 React.signal) ->
    p_PartitionAlignmentOffset : ('a -> int64 React.signal) ->
    p_PartitionTableScheme : ('a -> string React.signal) ->
    p_PartitionTableCount : ('a -> int32 React.signal) ->
    p_DriveVendor : ('a -> string React.signal) ->
    p_DriveModel : ('a -> string React.signal) ->
    p_DriveRevision : ('a -> string React.signal) ->
    p_DriveSerial : ('a -> string React.signal) ->
    p_DriveWwn : ('a -> string React.signal) ->
    p_DriveRotationRate : ('a -> int32 React.signal) ->
    p_DriveWriteCache : ('a -> string React.signal) ->
    p_DriveConnectionInterface : ('a -> string React.signal) ->
    p_DriveConnectionSpeed : ('a -> int64 React.signal) ->
    p_DriveMediaCompatibility : ('a -> string list React.signal) ->
    p_DriveMedia : ('a -> string React.signal) ->
    p_DriveIsMediaEjectable : ('a -> bool React.signal) ->
    p_DriveCanDetach : ('a -> bool React.signal) ->
    p_DriveCanSpindown : ('a -> bool React.signal) ->
    p_DriveIsRotational : ('a -> bool React.signal) ->
    p_DriveAdapter : ('a -> OBus_path.t React.signal) ->
    p_DrivePorts : ('a -> OBus_path.t list React.signal) ->
    p_DriveSimilarDevices : ('a -> OBus_path.t list React.signal) ->
    p_OpticalDiscIsBlank : ('a -> bool React.signal) ->
    p_OpticalDiscIsAppendable : ('a -> bool React.signal) ->
    p_OpticalDiscIsClosed : ('a -> bool React.signal) ->
    p_OpticalDiscNumTracks : ('a -> int32 React.signal) ->
    p_OpticalDiscNumAudioTracks : ('a -> int32 React.signal) ->
    p_OpticalDiscNumSessions : ('a -> int32 React.signal) ->
    p_DriveAtaSmartIsAvailable : ('a -> bool React.signal) ->
    p_DriveAtaSmartTimeCollected : ('a -> int64 React.signal) ->
    p_DriveAtaSmartStatus : ('a -> string React.signal) ->
    p_DriveAtaSmartBlob : ('a -> string React.signal) ->
    p_LinuxMdComponentLevel : ('a -> string React.signal) ->
    p_LinuxMdComponentPosition : ('a -> int32 React.signal) ->
    p_LinuxMdComponentNumRaidDevices : ('a -> int32 React.signal) ->
    p_LinuxMdComponentUuid : ('a -> string React.signal) ->
    p_LinuxMdComponentName : ('a -> string React.signal) ->
    p_LinuxMdComponentHomeHost : ('a -> string React.signal) ->
    p_LinuxMdComponentVersion : ('a -> string React.signal) ->
    p_LinuxMdComponentHolder : ('a -> OBus_path.t React.signal) ->
    p_LinuxMdComponentState : ('a -> string list React.signal) ->
    p_LinuxMdState : ('a -> string React.signal) ->
    p_LinuxMdLevel : ('a -> string React.signal) ->
    p_LinuxMdUuid : ('a -> string React.signal) ->
    p_LinuxMdHomeHost : ('a -> string React.signal) ->
    p_LinuxMdName : ('a -> string React.signal) ->
    p_LinuxMdNumRaidDevices : ('a -> int32 React.signal) ->
    p_LinuxMdVersion : ('a -> string React.signal) ->
    p_LinuxMdSlaves : ('a -> OBus_path.t list React.signal) ->
    p_LinuxMdIsDegraded : ('a -> bool React.signal) ->
    p_LinuxMdSyncAction : ('a -> string React.signal) ->
    p_LinuxMdSyncPercentage : ('a -> float React.signal) ->
    p_LinuxMdSyncSpeed : ('a -> int64 React.signal) ->
    p_LinuxLvm2PVUuid : ('a -> string React.signal) ->
    p_LinuxLvm2PVNumMetadataAreas : ('a -> int32 React.signal) ->
    p_LinuxLvm2PVGroupName : ('a -> string React.signal) ->
    p_LinuxLvm2PVGroupUuid : ('a -> string React.signal) ->
    p_LinuxLvm2PVGroupSize : ('a -> int64 React.signal) ->
    p_LinuxLvm2PVGroupUnallocatedSize : ('a -> int64 React.signal) ->
    p_LinuxLvm2PVGroupSequenceNumber : ('a -> int64 React.signal) ->
    p_LinuxLvm2PVGroupExtentSize : ('a -> int64 React.signal) ->
    p_LinuxLvm2PVGroupPhysicalVolumes : ('a -> string list React.signal) ->
    p_LinuxLvm2PVGroupLogicalVolumes : ('a -> string list React.signal) ->
    p_LinuxLvm2LVName : ('a -> string React.signal) ->
    p_LinuxLvm2LVUuid : ('a -> string React.signal) ->
    p_LinuxLvm2LVGroupName : ('a -> string React.signal) ->
    p_LinuxLvm2LVGroupUuid : ('a -> string React.signal) ->
    p_LinuxDmmpComponentHolder : ('a -> OBus_path.t React.signal) ->
    p_LinuxDmmpName : ('a -> string React.signal) ->
    p_LinuxDmmpSlaves : ('a -> OBus_path.t list React.signal) ->
    p_LinuxDmmpParameters : ('a -> string React.signal) ->
    p_LinuxLoopFilename : ('a -> string React.signal) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_UDisks_Expander : sig
  val s_Changed : unit Signal.t
  val p_NativePath : (string, [ `readable ]) Property.t
  val p_Vendor : (string, [ `readable ]) Property.t
  val p_Model : (string, [ `readable ]) Property.t
  val p_Revision : (string, [ `readable ]) Property.t
  val p_NumPorts : (int32, [ `readable ]) Property.t
  val p_UpstreamPorts : (OBus_path.t list, [ `readable ]) Property.t
  val p_Adapter : (OBus_path.t, [ `readable ]) Property.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    p_NativePath : ('a -> string React.signal) ->
    p_Vendor : ('a -> string React.signal) ->
    p_Model : ('a -> string React.signal) ->
    p_Revision : ('a -> string React.signal) ->
    p_NumPorts : ('a -> int32 React.signal) ->
    p_UpstreamPorts : ('a -> OBus_path.t list React.signal) ->
    p_Adapter : ('a -> OBus_path.t React.signal) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_UDisks_Port : sig
  val s_Changed : unit Signal.t
  val p_NativePath : (string, [ `readable ]) Property.t
  val p_Adapter : (OBus_path.t, [ `readable ]) Property.t
  val p_Parent : (OBus_path.t, [ `readable ]) Property.t
  val p_Number : (int32, [ `readable ]) Property.t
  val p_ConnectorType : (string, [ `readable ]) Property.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    p_NativePath : ('a -> string React.signal) ->
    p_Adapter : ('a -> OBus_path.t React.signal) ->
    p_Parent : ('a -> OBus_path.t React.signal) ->
    p_Number : ('a -> int32 React.signal) ->
    p_ConnectorType : ('a -> string React.signal) ->
    unit -> 'a OBus_object.interface
end
