(* File auto-generated by obus_gen_interface.best, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_UPower =
struct
  let interface = "org.freedesktop.UPower"
  let m_EnumerateDevices = {
    Method.interface = interface;
    Method.member = "EnumerateDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_object_path));
  }
  let s_DeviceAdded = {
    Signal.interface = interface;
    Signal.member = "DeviceAdded";
    Signal.args = (arg1
                       (Some "device", basic_string));
  }
  let s_DeviceRemoved = {
    Signal.interface = interface;
    Signal.member = "DeviceRemoved";
    Signal.args = (arg1
                       (Some "device", basic_string));
  }
  let s_DeviceChanged = {
    Signal.interface = interface;
    Signal.member = "DeviceChanged";
    Signal.args = (arg1
                       (Some "device", basic_string));
  }
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let s_Sleeping = {
    Signal.interface = interface;
    Signal.member = "Sleeping";
    Signal.args = (arg0);
  }
  let s_Resuming = {
    Signal.interface = interface;
    Signal.member = "Resuming";
    Signal.args = (arg0);
  }
  let m_AboutToSleep = {
    Method.interface = interface;
    Method.member = "AboutToSleep";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let m_Suspend = {
    Method.interface = interface;
    Method.member = "Suspend";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let m_SuspendAllowed = {
    Method.interface = interface;
    Method.member = "SuspendAllowed";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "allowed", basic_boolean));
  }
  let m_Hibernate = {
    Method.interface = interface;
    Method.member = "Hibernate";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let m_HibernateAllowed = {
    Method.interface = interface;
    Method.member = "HibernateAllowed";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "allowed", basic_boolean));
  }
  let p_DaemonVersion = {
    Property.interface = interface;
    Property.member = "DaemonVersion";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_CanSuspend = {
    Property.interface = interface;
    Property.member = "CanSuspend";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_CanHibernate = {
    Property.interface = interface;
    Property.member = "CanHibernate";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_OnBattery = {
    Property.interface = interface;
    Property.member = "OnBattery";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_OnLowBattery = {
    Property.interface = interface;
    Property.member = "OnLowBattery";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_LidIsClosed = {
    Property.interface = interface;
    Property.member = "LidIsClosed";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_LidIsPresent = {
    Property.interface = interface;
    Property.member = "LidIsPresent";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode      ~m_EnumerateDevices:m__EnumerateDevices
      ~m_AboutToSleep:m__AboutToSleep
      ~m_Suspend:m__Suspend
      ~m_SuspendAllowed:m__SuspendAllowed
      ~m_Hibernate:m__Hibernate
      ~m_HibernateAllowed:m__HibernateAllowed
      ~p_DaemonVersion:p__DaemonVersion
      ~p_CanSuspend:p__CanSuspend
      ~p_CanHibernate:p__CanHibernate
      ~p_OnBattery:p__OnBattery
      ~p_OnLowBattery:p__OnLowBattery
      ~p_LidIsClosed:p__LidIsClosed
      ~p_LidIsPresent:p__LidIsPresent
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_EnumerateDevices m__EnumerateDevices;
        method_info m_AboutToSleep m__AboutToSleep;
        method_info m_Suspend m__Suspend;
        method_info m_SuspendAllowed m__SuspendAllowed;
        method_info m_Hibernate m__Hibernate;
        method_info m_HibernateAllowed m__HibernateAllowed;
      |]
      [|
        signal_info s_DeviceAdded;
        signal_info s_DeviceRemoved;
        signal_info s_DeviceChanged;
        signal_info s_Changed;
        signal_info s_Sleeping;
        signal_info s_Resuming;
      |]
      [|
        property_r_info p_DaemonVersion p__DaemonVersion;
        property_r_info p_CanSuspend p__CanSuspend;
        property_r_info p_CanHibernate p__CanHibernate;
        property_r_info p_OnBattery p__OnBattery;
        property_r_info p_OnLowBattery p__OnLowBattery;
        property_r_info p_LidIsClosed p__LidIsClosed;
        property_r_info p_LidIsPresent p__LidIsPresent;
      |]
end
module Org_freedesktop_UPower_Device =
struct
  let interface = "org.freedesktop.UPower.Device"
  let m_Refresh = {
    Method.interface = interface;
    Method.member = "Refresh";
    Method.i_args = (arg0);
    Method.o_args = (arg0);
  }
  let s_Changed = {
    Signal.interface = interface;
    Signal.member = "Changed";
    Signal.args = (arg0);
  }
  let m_GetHistory = {
    Method.interface = interface;
    Method.member = "GetHistory";
    Method.i_args = (arg3
                       (Some "type", basic_string)
                       (Some "timespan", basic_uint32)
                       (Some "resolution", basic_uint32));
    Method.o_args = (arg1
                       (Some "data", array (structure (seq3 basic_uint32 basic_double basic_uint32))));
  }
  let m_GetStatistics = {
    Method.interface = interface;
    Method.member = "GetStatistics";
    Method.i_args = (arg1
                       (Some "type", basic_string));
    Method.o_args = (arg1
                       (Some "data", array (structure (seq2 basic_double basic_double))));
  }
  let p_NativePath = {
    Property.interface = interface;
    Property.member = "NativePath";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Vendor = {
    Property.interface = interface;
    Property.member = "Vendor";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Model = {
    Property.interface = interface;
    Property.member = "Model";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_Serial = {
    Property.interface = interface;
    Property.member = "Serial";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_UpdateTime = {
    Property.interface = interface;
    Property.member = "UpdateTime";
    Property.typ = basic_uint64;
    Property.access = Property.readable;
  }
  let p_Type = {
    Property.interface = interface;
    Property.member = "Type";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_PowerSupply = {
    Property.interface = interface;
    Property.member = "PowerSupply";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_HasHistory = {
    Property.interface = interface;
    Property.member = "HasHistory";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_HasStatistics = {
    Property.interface = interface;
    Property.member = "HasStatistics";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_Online = {
    Property.interface = interface;
    Property.member = "Online";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_Energy = {
    Property.interface = interface;
    Property.member = "Energy";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_EnergyEmpty = {
    Property.interface = interface;
    Property.member = "EnergyEmpty";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_EnergyFull = {
    Property.interface = interface;
    Property.member = "EnergyFull";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_EnergyFullDesign = {
    Property.interface = interface;
    Property.member = "EnergyFullDesign";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_EnergyRate = {
    Property.interface = interface;
    Property.member = "EnergyRate";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_Voltage = {
    Property.interface = interface;
    Property.member = "Voltage";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_TimeToEmpty = {
    Property.interface = interface;
    Property.member = "TimeToEmpty";
    Property.typ = basic_int64;
    Property.access = Property.readable;
  }
  let p_TimeToFull = {
    Property.interface = interface;
    Property.member = "TimeToFull";
    Property.typ = basic_int64;
    Property.access = Property.readable;
  }
  let p_Percentage = {
    Property.interface = interface;
    Property.member = "Percentage";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_IsPresent = {
    Property.interface = interface;
    Property.member = "IsPresent";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_State = {
    Property.interface = interface;
    Property.member = "State";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_IsRechargeable = {
    Property.interface = interface;
    Property.member = "IsRechargeable";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_Capacity = {
    Property.interface = interface;
    Property.member = "Capacity";
    Property.typ = basic_double;
    Property.access = Property.readable;
  }
  let p_Technology = {
    Property.interface = interface;
    Property.member = "Technology";
    Property.typ = basic_uint32;
    Property.access = Property.readable;
  }
  let p_RecallNotice = {
    Property.interface = interface;
    Property.member = "RecallNotice";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let p_RecallVendor = {
    Property.interface = interface;
    Property.member = "RecallVendor";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let p_RecallUrl = {
    Property.interface = interface;
    Property.member = "RecallUrl";
    Property.typ = basic_string;
    Property.access = Property.readable;
  }
  let make
      ?notify_mode      ~m_Refresh:m__Refresh
      ~m_GetHistory:m__GetHistory
      ~m_GetStatistics:m__GetStatistics
      ~p_NativePath:p__NativePath
      ~p_Vendor:p__Vendor
      ~p_Model:p__Model
      ~p_Serial:p__Serial
      ~p_UpdateTime:p__UpdateTime
      ~p_Type:p__Type
      ~p_PowerSupply:p__PowerSupply
      ~p_HasHistory:p__HasHistory
      ~p_HasStatistics:p__HasStatistics
      ~p_Online:p__Online
      ~p_Energy:p__Energy
      ~p_EnergyEmpty:p__EnergyEmpty
      ~p_EnergyFull:p__EnergyFull
      ~p_EnergyFullDesign:p__EnergyFullDesign
      ~p_EnergyRate:p__EnergyRate
      ~p_Voltage:p__Voltage
      ~p_TimeToEmpty:p__TimeToEmpty
      ~p_TimeToFull:p__TimeToFull
      ~p_Percentage:p__Percentage
      ~p_IsPresent:p__IsPresent
      ~p_State:p__State
      ~p_IsRechargeable:p__IsRechargeable
      ~p_Capacity:p__Capacity
      ~p_Technology:p__Technology
      ~p_RecallNotice:p__RecallNotice
      ~p_RecallVendor:p__RecallVendor
      ~p_RecallUrl:p__RecallUrl
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_Refresh m__Refresh;
        method_info m_GetHistory m__GetHistory;
        method_info m_GetStatistics m__GetStatistics;
      |]
      [|
        signal_info s_Changed;
      |]
      [|
        property_r_info p_NativePath p__NativePath;
        property_r_info p_Vendor p__Vendor;
        property_r_info p_Model p__Model;
        property_r_info p_Serial p__Serial;
        property_r_info p_UpdateTime p__UpdateTime;
        property_r_info p_Type p__Type;
        property_r_info p_PowerSupply p__PowerSupply;
        property_r_info p_HasHistory p__HasHistory;
        property_r_info p_HasStatistics p__HasStatistics;
        property_r_info p_Online p__Online;
        property_r_info p_Energy p__Energy;
        property_r_info p_EnergyEmpty p__EnergyEmpty;
        property_r_info p_EnergyFull p__EnergyFull;
        property_r_info p_EnergyFullDesign p__EnergyFullDesign;
        property_r_info p_EnergyRate p__EnergyRate;
        property_r_info p_Voltage p__Voltage;
        property_r_info p_TimeToEmpty p__TimeToEmpty;
        property_r_info p_TimeToFull p__TimeToFull;
        property_r_info p_Percentage p__Percentage;
        property_r_info p_IsPresent p__IsPresent;
        property_r_info p_State p__State;
        property_r_info p_IsRechargeable p__IsRechargeable;
        property_r_info p_Capacity p__Capacity;
        property_r_info p_Technology p__Technology;
        property_r_info p_RecallNotice p__RecallNotice;
        property_r_info p_RecallVendor p__RecallVendor;
        property_r_info p_RecallUrl p__RecallUrl;
      |]
end
module Org_freedesktop_UPower_QoS =
struct
  let interface = "org.freedesktop.UPower.QoS"
  let m_SetMinimumLatency = {
    Method.interface = interface;
    Method.member = "SetMinimumLatency";
    Method.i_args = (arg2
                       (Some "type", basic_string)
                       (Some "value", basic_int32));
    Method.o_args = (arg0);
  }
  let m_RequestLatency = {
    Method.interface = interface;
    Method.member = "RequestLatency";
    Method.i_args = (arg3
                       (Some "type", basic_string)
                       (Some "value", basic_int32)
                       (Some "persistent", basic_boolean));
    Method.o_args = (arg1
                       (Some "cookie", basic_uint32));
  }
  let m_CancelRequest = {
    Method.interface = interface;
    Method.member = "CancelRequest";
    Method.i_args = (arg2
                       (Some "type", basic_string)
                       (Some "cookie", basic_uint32));
    Method.o_args = (arg0);
  }
  let m_GetLatency = {
    Method.interface = interface;
    Method.member = "GetLatency";
    Method.i_args = (arg1
                       (Some "type", basic_string));
    Method.o_args = (arg1
                       (Some "value", basic_int32));
  }
  let s_LatencyChanged = {
    Signal.interface = interface;
    Signal.member = "LatencyChanged";
    Signal.args = (arg2
                       (Some "type", basic_string)
                       (Some "value", basic_int32));
  }
  let m_GetLatencyRequests = {
    Method.interface = interface;
    Method.member = "GetLatencyRequests";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "requests", array (structure (seq9 basic_uint32 basic_uint32 basic_uint32 basic_string basic_int64 basic_boolean basic_string basic_string basic_int32))));
  }
  let s_RequestsChanged = {
    Signal.interface = interface;
    Signal.member = "RequestsChanged";
    Signal.args = (arg0);
  }
  let make
      ?notify_mode      ~m_SetMinimumLatency:m__SetMinimumLatency
      ~m_RequestLatency:m__RequestLatency
      ~m_CancelRequest:m__CancelRequest
      ~m_GetLatency:m__GetLatency
      ~m_GetLatencyRequests:m__GetLatencyRequests
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_SetMinimumLatency m__SetMinimumLatency;
        method_info m_RequestLatency m__RequestLatency;
        method_info m_CancelRequest m__CancelRequest;
        method_info m_GetLatency m__GetLatency;
        method_info m_GetLatencyRequests m__GetLatencyRequests;
      |]
      [|
        signal_info s_LatencyChanged;
        signal_info s_RequestsChanged;
      |]
      [|
      |]
end
module Org_freedesktop_UPower_Wakeups =
struct
  let interface = "org.freedesktop.UPower.Wakeups"
  let p_HasCapability = {
    Property.interface = interface;
    Property.member = "HasCapability";
    Property.typ = basic_boolean;
    Property.access = Property.readable;
  }
  let m_GetTotal = {
    Method.interface = interface;
    Method.member = "GetTotal";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "value", basic_uint32));
  }
  let s_TotalChanged = {
    Signal.interface = interface;
    Signal.member = "TotalChanged";
    Signal.args = (arg1
                       (Some "value", basic_uint32));
  }
  let m_GetData = {
    Method.interface = interface;
    Method.member = "GetData";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "data", array (structure (seq5 basic_boolean basic_uint32 basic_double basic_string basic_string))));
  }
  let s_DataChanged = {
    Signal.interface = interface;
    Signal.member = "DataChanged";
    Signal.args = (arg0);
  }
  let make
      ?notify_mode      ~p_HasCapability:p__HasCapability
      ~m_GetTotal:m__GetTotal
      ~m_GetData:m__GetData
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_GetTotal m__GetTotal;
        method_info m_GetData m__GetData;
      |]
      [|
        signal_info s_TotalChanged;
        signal_info s_DataChanged;
      |]
      [|
        property_r_info p_HasCapability p__HasCapability;
      |]
end
