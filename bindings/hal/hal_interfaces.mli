(* File auto-generated by obus_gen_interface.best, DO NOT EDIT. *)
open OBus_member
module Org_freedesktop_Hal_Device : sig
  val m_GetAllProperties : (unit, (string * OBus_value.V.single) list) Method.t
  val m_SetMultipleProperties : ((string * OBus_value.V.single) list, unit) Method.t
  val m_GetProperty : (string, OBus_value.V.single) Method.t
  val m_GetPropertyString : (string, string) Method.t
  val m_GetPropertyStringList : (string, string list) Method.t
  val m_GetPropertyInteger : (string, int32) Method.t
  val m_GetPropertyBoolean : (string, bool) Method.t
  val m_GetPropertyDouble : (string, float) Method.t
  val m_SetProperty : (string * OBus_value.V.single, unit) Method.t
  val m_SetPropertyString : (string * string, unit) Method.t
  val m_SetPropertyStringList : (string * string list, unit) Method.t
  val m_SetPropertyInteger : (string * int32, unit) Method.t
  val m_SetPropertyBoolean : (string * bool, unit) Method.t
  val m_SetPropertyDouble : (string * float, unit) Method.t
  val m_RemoveProperty : (string, unit) Method.t
  val m_GetPropertyType : (string, int32) Method.t
  val m_PropertyExists : (string, bool) Method.t
  val m_AddCapability : (string, unit) Method.t
  val m_QueryCapability : (string, bool) Method.t
  val m_Lock : (string, bool) Method.t
  val m_Unlock : (unit, bool) Method.t
  val m_AcquireInterfaceLock : (string * bool, unit) Method.t
  val m_ReleaseInterfaceLock : (string, unit) Method.t
  val m_IsCallerLockedOut : (string * string, bool) Method.t
  val m_IsCallerPrivileged : (string * string, string) Method.t
  val m_IsLockedByOthers : (string, bool) Method.t
  val m_StringListAppend : (string * string, unit) Method.t
  val m_StringListPrepend : (string * string, unit) Method.t
  val m_StringListRemove : (string * string, unit) Method.t
  val m_EmitCondition : (string * string, bool) Method.t
  val m_Rescan : (unit, bool) Method.t
  val m_Reprobe : (unit, bool) Method.t
  val m_ClaimInterface : (string * string, bool) Method.t
  val m_AddonIsReady : (unit, bool) Method.t
  val s_PropertyModified : (int32 * (string * bool * bool) list) Signal.t
  val s_Condition : (string * string) Signal.t
  val s_InterfaceLockAcquired : (string * string * int32) Signal.t
  val s_InterfaceLockReleased : (string * string * int32) Signal.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_GetAllProperties : ((string * OBus_value.V.single) list OBus_context.t -> 'a -> unit -> (string * OBus_value.V.single) list Lwt.t) ->
    m_SetMultipleProperties : (unit OBus_context.t -> 'a -> (string * OBus_value.V.single) list -> unit Lwt.t) ->
    m_GetProperty : (OBus_value.V.single OBus_context.t -> 'a -> string -> OBus_value.V.single Lwt.t) ->
    m_GetPropertyString : (string OBus_context.t -> 'a -> string -> string Lwt.t) ->
    m_GetPropertyStringList : (string list OBus_context.t -> 'a -> string -> string list Lwt.t) ->
    m_GetPropertyInteger : (int32 OBus_context.t -> 'a -> string -> int32 Lwt.t) ->
    m_GetPropertyBoolean : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_GetPropertyDouble : (float OBus_context.t -> 'a -> string -> float Lwt.t) ->
    m_SetProperty : (unit OBus_context.t -> 'a -> string * OBus_value.V.single -> unit Lwt.t) ->
    m_SetPropertyString : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_SetPropertyStringList : (unit OBus_context.t -> 'a -> string * string list -> unit Lwt.t) ->
    m_SetPropertyInteger : (unit OBus_context.t -> 'a -> string * int32 -> unit Lwt.t) ->
    m_SetPropertyBoolean : (unit OBus_context.t -> 'a -> string * bool -> unit Lwt.t) ->
    m_SetPropertyDouble : (unit OBus_context.t -> 'a -> string * float -> unit Lwt.t) ->
    m_RemoveProperty : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_GetPropertyType : (int32 OBus_context.t -> 'a -> string -> int32 Lwt.t) ->
    m_PropertyExists : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_AddCapability : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_QueryCapability : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_Lock : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_Unlock : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    m_AcquireInterfaceLock : (unit OBus_context.t -> 'a -> string * bool -> unit Lwt.t) ->
    m_ReleaseInterfaceLock : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_IsCallerLockedOut : (bool OBus_context.t -> 'a -> string * string -> bool Lwt.t) ->
    m_IsCallerPrivileged : (string OBus_context.t -> 'a -> string * string -> string Lwt.t) ->
    m_IsLockedByOthers : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_StringListAppend : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_StringListPrepend : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_StringListRemove : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_EmitCondition : (bool OBus_context.t -> 'a -> string * string -> bool Lwt.t) ->
    m_Rescan : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    m_Reprobe : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    m_ClaimInterface : (bool OBus_context.t -> 'a -> string * string -> bool Lwt.t) ->
    m_AddonIsReady : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_CPUFreq : sig
  val m_SetCPUFreqGovernor : (string, unit) Method.t
  val m_SetCPUFreqPerformance : (int32, unit) Method.t
  val m_SetCPUFreqConsiderNice : (bool, unit) Method.t
  val m_GetCPUFreqGovernor : (unit, string) Method.t
  val m_GetCPUFreqPerformance : (unit, int32) Method.t
  val m_GetCPUFreqConsiderNice : (unit, bool) Method.t
  val m_GetCPUFreqAvailableGovernors : (unit, string list) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_SetCPUFreqGovernor : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_SetCPUFreqPerformance : (unit OBus_context.t -> 'a -> int32 -> unit Lwt.t) ->
    m_SetCPUFreqConsiderNice : (unit OBus_context.t -> 'a -> bool -> unit Lwt.t) ->
    m_GetCPUFreqGovernor : (string OBus_context.t -> 'a -> unit -> string Lwt.t) ->
    m_GetCPUFreqPerformance : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_GetCPUFreqConsiderNice : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    m_GetCPUFreqAvailableGovernors : (string list OBus_context.t -> 'a -> unit -> string list Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_KillSwitch : sig
  val m_SetPower : (bool, int32) Method.t
  val m_GetPower : (unit, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_SetPower : (int32 OBus_context.t -> 'a -> bool -> int32 Lwt.t) ->
    m_GetPower : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_LaptopPanel : sig
  val m_SetBrightness : (int32, int32) Method.t
  val m_GetBrightness : (unit, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_SetBrightness : (int32 OBus_context.t -> 'a -> int32 -> int32 Lwt.t) ->
    m_GetBrightness : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_Storage : sig
  val m_Eject : (string list, int32) Method.t
  val m_CloseTray : (string list, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_Eject : (int32 OBus_context.t -> 'a -> string list -> int32 Lwt.t) ->
    m_CloseTray : (int32 OBus_context.t -> 'a -> string list -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_Storage_Removable : sig
  val m_CheckForMedia : (unit, bool) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_CheckForMedia : (bool OBus_context.t -> 'a -> unit -> bool Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_SystemPowerManagement : sig
  val m_Suspend : (int32, int32) Method.t
  val m_SuspendHybrid : (int32, int32) Method.t
  val m_Hibernate : (unit, int32) Method.t
  val m_Shutdown : (unit, int32) Method.t
  val m_Reboot : (unit, int32) Method.t
  val m_SetPowerSave : (bool, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_Suspend : (int32 OBus_context.t -> 'a -> int32 -> int32 Lwt.t) ->
    m_SuspendHybrid : (int32 OBus_context.t -> 'a -> int32 -> int32 Lwt.t) ->
    m_Hibernate : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_Shutdown : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_Reboot : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_SetPowerSave : (int32 OBus_context.t -> 'a -> bool -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_Volume : sig
  val m_Mount : (string * string * string list, int32) Method.t
  val m_Unmount : (string list, int32) Method.t
  val m_Eject : (string list, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_Mount : (int32 OBus_context.t -> 'a -> string * string * string list -> int32 Lwt.t) ->
    m_Unmount : (int32 OBus_context.t -> 'a -> string list -> int32 Lwt.t) ->
    m_Eject : (int32 OBus_context.t -> 'a -> string list -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Device_WakeOnLan : sig
  val m_GetSupported : (unit, int32) Method.t
  val m_GetEnabled : (unit, int32) Method.t
  val m_SetEnabled : (bool, int32) Method.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_GetSupported : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_GetEnabled : (int32 OBus_context.t -> 'a -> unit -> int32 Lwt.t) ->
    m_SetEnabled : (int32 OBus_context.t -> 'a -> bool -> int32 Lwt.t) ->
    unit -> 'a OBus_object.interface
end
module Org_freedesktop_Hal_Manager : sig
  val m_GetAllDevices : (unit, string list) Method.t
  val m_GetAllDevicesWithProperties : (unit, (string * (string * OBus_value.V.single) list) list) Method.t
  val m_DeviceExists : (string, bool) Method.t
  val m_FindDeviceStringMatch : (string * string, string list) Method.t
  val m_FindDeviceByCapability : (string, string list) Method.t
  val m_NewDevice : (unit, string) Method.t
  val m_Remove : (string, unit) Method.t
  val m_CommitToGdl : (string * string, unit) Method.t
  val m_AcquireGlobalInterfaceLock : (string * bool, unit) Method.t
  val m_ReleaseGlobalInterfaceLock : (string, unit) Method.t
  val m_SingletonAddonIsReady : (string, unit) Method.t
  val s_DeviceAdded : string Signal.t
  val s_DeviceRemoved : string Signal.t
  val s_NewCapability : (string * string) Signal.t
  val s_GlobalInterfaceLockAcquired : (string * string * int32) Signal.t
  val s_GlobalInterfaceLockReleased : (string * string * int32) Signal.t
  val make :
    ?notify_mode : 'a OBus_object.notify_mode ->
    m_GetAllDevices : (string list OBus_context.t -> 'a -> unit -> string list Lwt.t) ->
    m_GetAllDevicesWithProperties : ((string * (string * OBus_value.V.single) list) list OBus_context.t -> 'a -> unit -> (string * (string * OBus_value.V.single) list) list Lwt.t) ->
    m_DeviceExists : (bool OBus_context.t -> 'a -> string -> bool Lwt.t) ->
    m_FindDeviceStringMatch : (string list OBus_context.t -> 'a -> string * string -> string list Lwt.t) ->
    m_FindDeviceByCapability : (string list OBus_context.t -> 'a -> string -> string list Lwt.t) ->
    m_NewDevice : (string OBus_context.t -> 'a -> unit -> string Lwt.t) ->
    m_Remove : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_CommitToGdl : (unit OBus_context.t -> 'a -> string * string -> unit Lwt.t) ->
    m_AcquireGlobalInterfaceLock : (unit OBus_context.t -> 'a -> string * bool -> unit Lwt.t) ->
    m_ReleaseGlobalInterfaceLock : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    m_SingletonAddonIsReady : (unit OBus_context.t -> 'a -> string -> unit Lwt.t) ->
    unit -> 'a OBus_object.interface
end
