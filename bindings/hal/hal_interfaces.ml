(* File auto-generated by obus_gen_interface.best, DO NOT EDIT. *)
open OBus_value
open OBus_value.C
open OBus_member
open OBus_object
module Org_freedesktop_Hal_Device =
struct
  let interface = "org.freedesktop.Hal.Device"
  let m_GetAllProperties = {
    Method.interface = interface;
    Method.member = "GetAllProperties";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "properties", dict string variant));
  }
  let m_SetMultipleProperties = {
    Method.interface = interface;
    Method.member = "SetMultipleProperties";
    Method.i_args = (arg1
                       (Some "properties", dict string variant));
    Method.o_args = (arg0);
  }
  let m_GetProperty = {
    Method.interface = interface;
    Method.member = "GetProperty";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", variant));
  }
  let m_GetPropertyString = {
    Method.interface = interface;
    Method.member = "GetPropertyString";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", basic_string));
  }
  let m_GetPropertyStringList = {
    Method.interface = interface;
    Method.member = "GetPropertyStringList";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", array basic_string));
  }
  let m_GetPropertyInteger = {
    Method.interface = interface;
    Method.member = "GetPropertyInteger";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", basic_int32));
  }
  let m_GetPropertyBoolean = {
    Method.interface = interface;
    Method.member = "GetPropertyBoolean";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", basic_boolean));
  }
  let m_GetPropertyDouble = {
    Method.interface = interface;
    Method.member = "GetPropertyDouble";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "value", basic_double));
  }
  let m_SetProperty = {
    Method.interface = interface;
    Method.member = "SetProperty";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", variant));
    Method.o_args = (arg0);
  }
  let m_SetPropertyString = {
    Method.interface = interface;
    Method.member = "SetPropertyString";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_string));
    Method.o_args = (arg0);
  }
  let m_SetPropertyStringList = {
    Method.interface = interface;
    Method.member = "SetPropertyStringList";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", array basic_string));
    Method.o_args = (arg0);
  }
  let m_SetPropertyInteger = {
    Method.interface = interface;
    Method.member = "SetPropertyInteger";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_int32));
    Method.o_args = (arg0);
  }
  let m_SetPropertyBoolean = {
    Method.interface = interface;
    Method.member = "SetPropertyBoolean";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_boolean));
    Method.o_args = (arg0);
  }
  let m_SetPropertyDouble = {
    Method.interface = interface;
    Method.member = "SetPropertyDouble";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_double));
    Method.o_args = (arg0);
  }
  let m_RemoveProperty = {
    Method.interface = interface;
    Method.member = "RemoveProperty";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg0);
  }
  let m_GetPropertyType = {
    Method.interface = interface;
    Method.member = "GetPropertyType";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "type", basic_int32));
  }
  let m_PropertyExists = {
    Method.interface = interface;
    Method.member = "PropertyExists";
    Method.i_args = (arg1
                       (Some "key", basic_string));
    Method.o_args = (arg1
                       (Some "does_it_exist", basic_boolean));
  }
  let m_AddCapability = {
    Method.interface = interface;
    Method.member = "AddCapability";
    Method.i_args = (arg1
                       (Some "capability", basic_string));
    Method.o_args = (arg0);
  }
  let m_QueryCapability = {
    Method.interface = interface;
    Method.member = "QueryCapability";
    Method.i_args = (arg1
                       (Some "capability", basic_string));
    Method.o_args = (arg1
                       (Some "does_it_have_capability", basic_boolean));
  }
  let m_Lock = {
    Method.interface = interface;
    Method.member = "Lock";
    Method.i_args = (arg1
                       (Some "reason", basic_string));
    Method.o_args = (arg1
                       (Some "acquired_lock", basic_boolean));
  }
  let m_Unlock = {
    Method.interface = interface;
    Method.member = "Unlock";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "released_lock", basic_boolean));
  }
  let m_AcquireInterfaceLock = {
    Method.interface = interface;
    Method.member = "AcquireInterfaceLock";
    Method.i_args = (arg2
                       (Some "interface_name", basic_string)
                       (Some "exclusive", basic_boolean));
    Method.o_args = (arg0);
  }
  let m_ReleaseInterfaceLock = {
    Method.interface = interface;
    Method.member = "ReleaseInterfaceLock";
    Method.i_args = (arg1
                       (Some "interface_name", basic_string));
    Method.o_args = (arg0);
  }
  let m_IsCallerLockedOut = {
    Method.interface = interface;
    Method.member = "IsCallerLockedOut";
    Method.i_args = (arg2
                       (Some "interface_name", basic_string)
                       (Some "caller_sysbus_name", basic_string));
    Method.o_args = (arg1
                       (Some "whether_caller_is_locked_out", basic_boolean));
  }
  let m_IsCallerPrivileged = {
    Method.interface = interface;
    Method.member = "IsCallerPrivileged";
    Method.i_args = (arg2
                       (Some "action", basic_string)
                       (Some "caller_sysbus_name", basic_string));
    Method.o_args = (arg1
                       (Some "result", basic_string));
  }
  let m_IsLockedByOthers = {
    Method.interface = interface;
    Method.member = "IsLockedByOthers";
    Method.i_args = (arg1
                       (Some "interface_name", basic_string));
    Method.o_args = (arg1
                       (Some "whether_it_is_locked_by_others", basic_boolean));
  }
  let m_StringListAppend = {
    Method.interface = interface;
    Method.member = "StringListAppend";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_string));
    Method.o_args = (arg0);
  }
  let m_StringListPrepend = {
    Method.interface = interface;
    Method.member = "StringListPrepend";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_string));
    Method.o_args = (arg0);
  }
  let m_StringListRemove = {
    Method.interface = interface;
    Method.member = "StringListRemove";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_string));
    Method.o_args = (arg0);
  }
  let m_EmitCondition = {
    Method.interface = interface;
    Method.member = "EmitCondition";
    Method.i_args = (arg2
                       (Some "condition_name", basic_string)
                       (Some "condition_details", basic_string));
    Method.o_args = (arg1
                       (Some "rc", basic_boolean));
  }
  let m_Rescan = {
    Method.interface = interface;
    Method.member = "Rescan";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "call_had_sideeffect", basic_boolean));
  }
  let m_Reprobe = {
    Method.interface = interface;
    Method.member = "Reprobe";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "call_had_sideeffect", basic_boolean));
  }
  let m_ClaimInterface = {
    Method.interface = interface;
    Method.member = "ClaimInterface";
    Method.i_args = (arg2
                       (Some "interface_name", basic_string)
                       (Some "introspection_xml", basic_string));
    Method.o_args = (arg1
                       (Some "rc", basic_boolean));
  }
  let m_AddonIsReady = {
    Method.interface = interface;
    Method.member = "AddonIsReady";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "rc", basic_boolean));
  }
  let s_PropertyModified = {
    Signal.interface = interface;
    Signal.member = "PropertyModified";
    Signal.args = (arg2
                       (Some "num_updates", basic_int32)
                       (Some "updates", array (structure (seq3 basic_string basic_boolean basic_boolean))));
  }
  let s_Condition = {
    Signal.interface = interface;
    Signal.member = "Condition";
    Signal.args = (arg2
                       (Some "cond_name", basic_string)
                       (Some "cond_details", basic_string));
  }
  let s_InterfaceLockAcquired = {
    Signal.interface = interface;
    Signal.member = "InterfaceLockAcquired";
    Signal.args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "lock_holder", basic_string)
                       (Some "num_locks", basic_int32));
  }
  let s_InterfaceLockReleased = {
    Signal.interface = interface;
    Signal.member = "InterfaceLockReleased";
    Signal.args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "lock_holder", basic_string)
                       (Some "num_locks", basic_int32));
  }
  let make
      ?notify_mode      ~m_GetAllProperties:m__GetAllProperties
      ~m_SetMultipleProperties:m__SetMultipleProperties
      ~m_GetProperty:m__GetProperty
      ~m_GetPropertyString:m__GetPropertyString
      ~m_GetPropertyStringList:m__GetPropertyStringList
      ~m_GetPropertyInteger:m__GetPropertyInteger
      ~m_GetPropertyBoolean:m__GetPropertyBoolean
      ~m_GetPropertyDouble:m__GetPropertyDouble
      ~m_SetProperty:m__SetProperty
      ~m_SetPropertyString:m__SetPropertyString
      ~m_SetPropertyStringList:m__SetPropertyStringList
      ~m_SetPropertyInteger:m__SetPropertyInteger
      ~m_SetPropertyBoolean:m__SetPropertyBoolean
      ~m_SetPropertyDouble:m__SetPropertyDouble
      ~m_RemoveProperty:m__RemoveProperty
      ~m_GetPropertyType:m__GetPropertyType
      ~m_PropertyExists:m__PropertyExists
      ~m_AddCapability:m__AddCapability
      ~m_QueryCapability:m__QueryCapability
      ~m_Lock:m__Lock
      ~m_Unlock:m__Unlock
      ~m_AcquireInterfaceLock:m__AcquireInterfaceLock
      ~m_ReleaseInterfaceLock:m__ReleaseInterfaceLock
      ~m_IsCallerLockedOut:m__IsCallerLockedOut
      ~m_IsCallerPrivileged:m__IsCallerPrivileged
      ~m_IsLockedByOthers:m__IsLockedByOthers
      ~m_StringListAppend:m__StringListAppend
      ~m_StringListPrepend:m__StringListPrepend
      ~m_StringListRemove:m__StringListRemove
      ~m_EmitCondition:m__EmitCondition
      ~m_Rescan:m__Rescan
      ~m_Reprobe:m__Reprobe
      ~m_ClaimInterface:m__ClaimInterface
      ~m_AddonIsReady:m__AddonIsReady
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_GetAllProperties m__GetAllProperties;
        method_info m_SetMultipleProperties m__SetMultipleProperties;
        method_info m_GetProperty m__GetProperty;
        method_info m_GetPropertyString m__GetPropertyString;
        method_info m_GetPropertyStringList m__GetPropertyStringList;
        method_info m_GetPropertyInteger m__GetPropertyInteger;
        method_info m_GetPropertyBoolean m__GetPropertyBoolean;
        method_info m_GetPropertyDouble m__GetPropertyDouble;
        method_info m_SetProperty m__SetProperty;
        method_info m_SetPropertyString m__SetPropertyString;
        method_info m_SetPropertyStringList m__SetPropertyStringList;
        method_info m_SetPropertyInteger m__SetPropertyInteger;
        method_info m_SetPropertyBoolean m__SetPropertyBoolean;
        method_info m_SetPropertyDouble m__SetPropertyDouble;
        method_info m_RemoveProperty m__RemoveProperty;
        method_info m_GetPropertyType m__GetPropertyType;
        method_info m_PropertyExists m__PropertyExists;
        method_info m_AddCapability m__AddCapability;
        method_info m_QueryCapability m__QueryCapability;
        method_info m_Lock m__Lock;
        method_info m_Unlock m__Unlock;
        method_info m_AcquireInterfaceLock m__AcquireInterfaceLock;
        method_info m_ReleaseInterfaceLock m__ReleaseInterfaceLock;
        method_info m_IsCallerLockedOut m__IsCallerLockedOut;
        method_info m_IsCallerPrivileged m__IsCallerPrivileged;
        method_info m_IsLockedByOthers m__IsLockedByOthers;
        method_info m_StringListAppend m__StringListAppend;
        method_info m_StringListPrepend m__StringListPrepend;
        method_info m_StringListRemove m__StringListRemove;
        method_info m_EmitCondition m__EmitCondition;
        method_info m_Rescan m__Rescan;
        method_info m_Reprobe m__Reprobe;
        method_info m_ClaimInterface m__ClaimInterface;
        method_info m_AddonIsReady m__AddonIsReady;
      |]
      [|
        signal_info s_PropertyModified;
        signal_info s_Condition;
        signal_info s_InterfaceLockAcquired;
        signal_info s_InterfaceLockReleased;
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_CPUFreq =
struct
  let interface = "org.freedesktop.Hal.Device.CPUFreq"
  let m_SetCPUFreqGovernor = {
    Method.interface = interface;
    Method.member = "SetCPUFreqGovernor";
    Method.i_args = (arg1
                       (Some "governor_string", basic_string));
    Method.o_args = (arg0);
  }
  let m_SetCPUFreqPerformance = {
    Method.interface = interface;
    Method.member = "SetCPUFreqPerformance";
    Method.i_args = (arg1
                       (Some "value", basic_int32));
    Method.o_args = (arg0);
  }
  let m_SetCPUFreqConsiderNice = {
    Method.interface = interface;
    Method.member = "SetCPUFreqConsiderNice";
    Method.i_args = (arg1
                       (Some "value", basic_boolean));
    Method.o_args = (arg0);
  }
  let m_GetCPUFreqGovernor = {
    Method.interface = interface;
    Method.member = "GetCPUFreqGovernor";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_string));
  }
  let m_GetCPUFreqPerformance = {
    Method.interface = interface;
    Method.member = "GetCPUFreqPerformance";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_GetCPUFreqConsiderNice = {
    Method.interface = interface;
    Method.member = "GetCPUFreqConsiderNice";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_boolean));
  }
  let m_GetCPUFreqAvailableGovernors = {
    Method.interface = interface;
    Method.member = "GetCPUFreqAvailableGovernors";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", array basic_string));
  }
  let make
      ?notify_mode      ~m_SetCPUFreqGovernor:m__SetCPUFreqGovernor
      ~m_SetCPUFreqPerformance:m__SetCPUFreqPerformance
      ~m_SetCPUFreqConsiderNice:m__SetCPUFreqConsiderNice
      ~m_GetCPUFreqGovernor:m__GetCPUFreqGovernor
      ~m_GetCPUFreqPerformance:m__GetCPUFreqPerformance
      ~m_GetCPUFreqConsiderNice:m__GetCPUFreqConsiderNice
      ~m_GetCPUFreqAvailableGovernors:m__GetCPUFreqAvailableGovernors
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_SetCPUFreqGovernor m__SetCPUFreqGovernor;
        method_info m_SetCPUFreqPerformance m__SetCPUFreqPerformance;
        method_info m_SetCPUFreqConsiderNice m__SetCPUFreqConsiderNice;
        method_info m_GetCPUFreqGovernor m__GetCPUFreqGovernor;
        method_info m_GetCPUFreqPerformance m__GetCPUFreqPerformance;
        method_info m_GetCPUFreqConsiderNice m__GetCPUFreqConsiderNice;
        method_info m_GetCPUFreqAvailableGovernors m__GetCPUFreqAvailableGovernors;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_KillSwitch =
struct
  let interface = "org.freedesktop.Hal.Device.KillSwitch"
  let m_SetPower = {
    Method.interface = interface;
    Method.member = "SetPower";
    Method.i_args = (arg1
                       (Some "value", basic_boolean));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_GetPower = {
    Method.interface = interface;
    Method.member = "GetPower";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "value", basic_int32));
  }
  let make
      ?notify_mode      ~m_SetPower:m__SetPower
      ~m_GetPower:m__GetPower
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_SetPower m__SetPower;
        method_info m_GetPower m__GetPower;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_LaptopPanel =
struct
  let interface = "org.freedesktop.Hal.Device.LaptopPanel"
  let m_SetBrightness = {
    Method.interface = interface;
    Method.member = "SetBrightness";
    Method.i_args = (arg1
                       (Some "brightness_value", basic_int32));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_GetBrightness = {
    Method.interface = interface;
    Method.member = "GetBrightness";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "brightness_value", basic_int32));
  }
  let make
      ?notify_mode      ~m_SetBrightness:m__SetBrightness
      ~m_GetBrightness:m__GetBrightness
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_SetBrightness m__SetBrightness;
        method_info m_GetBrightness m__GetBrightness;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_Storage =
struct
  let interface = "org.freedesktop.Hal.Device.Storage"
  let m_Eject = {
    Method.interface = interface;
    Method.member = "Eject";
    Method.i_args = (arg1
                       (Some "extra_options", array basic_string));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_CloseTray = {
    Method.interface = interface;
    Method.member = "CloseTray";
    Method.i_args = (arg1
                       (Some "extra_options", array basic_string));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let make
      ?notify_mode      ~m_Eject:m__Eject
      ~m_CloseTray:m__CloseTray
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_Eject m__Eject;
        method_info m_CloseTray m__CloseTray;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_Storage_Removable =
struct
  let interface = "org.freedesktop.Hal.Device.Storage.Removable"
  let m_CheckForMedia = {
    Method.interface = interface;
    Method.member = "CheckForMedia";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "call_had_sideeffect", basic_boolean));
  }
  let make
      ?notify_mode      ~m_CheckForMedia:m__CheckForMedia
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_CheckForMedia m__CheckForMedia;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_SystemPowerManagement =
struct
  let interface = "org.freedesktop.Hal.Device.SystemPowerManagement"
  let m_Suspend = {
    Method.interface = interface;
    Method.member = "Suspend";
    Method.i_args = (arg1
                       (Some "num_seconds_to_sleep", basic_int32));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_SuspendHybrid = {
    Method.interface = interface;
    Method.member = "SuspendHybrid";
    Method.i_args = (arg1
                       (Some "num_seconds_to_sleep", basic_int32));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_Hibernate = {
    Method.interface = interface;
    Method.member = "Hibernate";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_Shutdown = {
    Method.interface = interface;
    Method.member = "Shutdown";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_Reboot = {
    Method.interface = interface;
    Method.member = "Reboot";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_SetPowerSave = {
    Method.interface = interface;
    Method.member = "SetPowerSave";
    Method.i_args = (arg1
                       (Some "enable_power_save", basic_boolean));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let make
      ?notify_mode      ~m_Suspend:m__Suspend
      ~m_SuspendHybrid:m__SuspendHybrid
      ~m_Hibernate:m__Hibernate
      ~m_Shutdown:m__Shutdown
      ~m_Reboot:m__Reboot
      ~m_SetPowerSave:m__SetPowerSave
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_Suspend m__Suspend;
        method_info m_SuspendHybrid m__SuspendHybrid;
        method_info m_Hibernate m__Hibernate;
        method_info m_Shutdown m__Shutdown;
        method_info m_Reboot m__Reboot;
        method_info m_SetPowerSave m__SetPowerSave;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_Volume =
struct
  let interface = "org.freedesktop.Hal.Device.Volume"
  let m_Mount = {
    Method.interface = interface;
    Method.member = "Mount";
    Method.i_args = (arg3
                       (Some "mount_point", basic_string)
                       (Some "fstype", basic_string)
                       (Some "extra_options", array basic_string));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_Unmount = {
    Method.interface = interface;
    Method.member = "Unmount";
    Method.i_args = (arg1
                       (Some "extra_options", array basic_string));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_Eject = {
    Method.interface = interface;
    Method.member = "Eject";
    Method.i_args = (arg1
                       (Some "extra_options", array basic_string));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let make
      ?notify_mode      ~m_Mount:m__Mount
      ~m_Unmount:m__Unmount
      ~m_Eject:m__Eject
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_Mount m__Mount;
        method_info m_Unmount m__Unmount;
        method_info m_Eject m__Eject;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Device_WakeOnLan =
struct
  let interface = "org.freedesktop.Hal.Device.WakeOnLan"
  let m_GetSupported = {
    Method.interface = interface;
    Method.member = "GetSupported";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_GetEnabled = {
    Method.interface = interface;
    Method.member = "GetEnabled";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let m_SetEnabled = {
    Method.interface = interface;
    Method.member = "SetEnabled";
    Method.i_args = (arg1
                       (Some "enable", basic_boolean));
    Method.o_args = (arg1
                       (Some "return_code", basic_int32));
  }
  let make
      ?notify_mode      ~m_GetSupported:m__GetSupported
      ~m_GetEnabled:m__GetEnabled
      ~m_SetEnabled:m__SetEnabled
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_GetSupported m__GetSupported;
        method_info m_GetEnabled m__GetEnabled;
        method_info m_SetEnabled m__SetEnabled;
      |]
      [|
      |]
      [|
      |]
end
module Org_freedesktop_Hal_Manager =
struct
  let interface = "org.freedesktop.Hal.Manager"
  let m_GetAllDevices = {
    Method.interface = interface;
    Method.member = "GetAllDevices";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices", array basic_string));
  }
  let m_GetAllDevicesWithProperties = {
    Method.interface = interface;
    Method.member = "GetAllDevicesWithProperties";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "devices_with_props", array (structure (seq2 basic_string (dict string variant)))));
  }
  let m_DeviceExists = {
    Method.interface = interface;
    Method.member = "DeviceExists";
    Method.i_args = (arg1
                       (Some "udi", basic_string));
    Method.o_args = (arg1
                       (Some "does_it_exist", basic_boolean));
  }
  let m_FindDeviceStringMatch = {
    Method.interface = interface;
    Method.member = "FindDeviceStringMatch";
    Method.i_args = (arg2
                       (Some "key", basic_string)
                       (Some "value", basic_string));
    Method.o_args = (arg1
                       (Some "devices", array basic_string));
  }
  let m_FindDeviceByCapability = {
    Method.interface = interface;
    Method.member = "FindDeviceByCapability";
    Method.i_args = (arg1
                       (Some "capability", basic_string));
    Method.o_args = (arg1
                       (Some "devices", array basic_string));
  }
  let m_NewDevice = {
    Method.interface = interface;
    Method.member = "NewDevice";
    Method.i_args = (arg0);
    Method.o_args = (arg1
                       (Some "temporary_udi", basic_string));
  }
  let m_Remove = {
    Method.interface = interface;
    Method.member = "Remove";
    Method.i_args = (arg1
                       (Some "udi", basic_string));
    Method.o_args = (arg0);
  }
  let m_CommitToGdl = {
    Method.interface = interface;
    Method.member = "CommitToGdl";
    Method.i_args = (arg2
                       (Some "temporary_udi", basic_string)
                       (Some "global_udi", basic_string));
    Method.o_args = (arg0);
  }
  let m_AcquireGlobalInterfaceLock = {
    Method.interface = interface;
    Method.member = "AcquireGlobalInterfaceLock";
    Method.i_args = (arg2
                       (Some "interface_name", basic_string)
                       (Some "exclusive", basic_boolean));
    Method.o_args = (arg0);
  }
  let m_ReleaseGlobalInterfaceLock = {
    Method.interface = interface;
    Method.member = "ReleaseGlobalInterfaceLock";
    Method.i_args = (arg1
                       (Some "interface_name", basic_string));
    Method.o_args = (arg0);
  }
  let m_SingletonAddonIsReady = {
    Method.interface = interface;
    Method.member = "SingletonAddonIsReady";
    Method.i_args = (arg1
                       (Some "command_line", basic_string));
    Method.o_args = (arg0);
  }
  let s_DeviceAdded = {
    Signal.interface = interface;
    Signal.member = "DeviceAdded";
    Signal.args = (arg1
                       (Some "udi", basic_string));
  }
  let s_DeviceRemoved = {
    Signal.interface = interface;
    Signal.member = "DeviceRemoved";
    Signal.args = (arg1
                       (Some "udi", basic_string));
  }
  let s_NewCapability = {
    Signal.interface = interface;
    Signal.member = "NewCapability";
    Signal.args = (arg2
                       (Some "udi", basic_string)
                       (Some "cap_name", basic_string));
  }
  let s_GlobalInterfaceLockAcquired = {
    Signal.interface = interface;
    Signal.member = "GlobalInterfaceLockAcquired";
    Signal.args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "lock_holder", basic_string)
                       (Some "num_locks", basic_int32));
  }
  let s_GlobalInterfaceLockReleased = {
    Signal.interface = interface;
    Signal.member = "GlobalInterfaceLockReleased";
    Signal.args = (arg3
                       (Some "interface_name", basic_string)
                       (Some "lock_holder", basic_string)
                       (Some "num_locks", basic_int32));
  }
  let make
      ?notify_mode      ~m_GetAllDevices:m__GetAllDevices
      ~m_GetAllDevicesWithProperties:m__GetAllDevicesWithProperties
      ~m_DeviceExists:m__DeviceExists
      ~m_FindDeviceStringMatch:m__FindDeviceStringMatch
      ~m_FindDeviceByCapability:m__FindDeviceByCapability
      ~m_NewDevice:m__NewDevice
      ~m_Remove:m__Remove
      ~m_CommitToGdl:m__CommitToGdl
      ~m_AcquireGlobalInterfaceLock:m__AcquireGlobalInterfaceLock
      ~m_ReleaseGlobalInterfaceLock:m__ReleaseGlobalInterfaceLock
      ~m_SingletonAddonIsReady:m__SingletonAddonIsReady
      ()
      =
    OBus_object.make_interface_unsafe ?notify_mode interface
      [|
        method_info m_GetAllDevices m__GetAllDevices;
        method_info m_GetAllDevicesWithProperties m__GetAllDevicesWithProperties;
        method_info m_DeviceExists m__DeviceExists;
        method_info m_FindDeviceStringMatch m__FindDeviceStringMatch;
        method_info m_FindDeviceByCapability m__FindDeviceByCapability;
        method_info m_NewDevice m__NewDevice;
        method_info m_Remove m__Remove;
        method_info m_CommitToGdl m__CommitToGdl;
        method_info m_AcquireGlobalInterfaceLock m__AcquireGlobalInterfaceLock;
        method_info m_ReleaseGlobalInterfaceLock m__ReleaseGlobalInterfaceLock;
        method_info m_SingletonAddonIsReady m__SingletonAddonIsReady;
      |]
      [|
        signal_info s_DeviceAdded;
        signal_info s_DeviceRemoved;
        signal_info s_NewCapability;
        signal_info s_GlobalInterfaceLockAcquired;
        signal_info s_GlobalInterfaceLockReleased;
      |]
      [|
      |]
end
