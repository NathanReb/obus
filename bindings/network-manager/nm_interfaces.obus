(*
 * nm_interfaces.obus
 * ------------------
 * Copyright : (c) 2010, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implementation of D-Bus.
 *)

interface org.freedesktop.NetworkManager {
  method GetDevices : () -> (devices : object_path array)
  method ActivateConnection : (service_name : string, connection : object_path, device : object_path, specific_object : object_path) -> (active_connection : object_path)
  method DeactivateConnection : (active_connection : object_path) -> ()
  method Sleep : (sleep : boolean) -> ()
  property_rw WirelessEnabled : boolean
  property_r WirelessHardwareEnabled : boolean
  property_rw WwanEnabled : boolean
  property_r WwanHardwareEnabled : boolean
  property_r ActiveConnections : object_path array
  property_r State : uint32
  signal StateChanged : (state : uint32)
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal DeviceAdded : (state : object_path)
  signal DeviceRemoved : (state : object_path)
}

interface org.freedesktop.NetworkManager.AccessPoint {
  property_r Flags : uint32
  property_r WpaFlags : uint32
  property_r RsnFlags : uint32
  property_r Ssid : byte array
  property_r Frequency : uint32
  property_r HwAddress : string
  property_r Mode : uint32
  property_r MaxBitrate : uint32
  property_r Strength : byte
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Connection.Active {
  property_r ServiceName : string
  property_r Connection : object_path
  property_r SpecificObject : object_path
  property_r Devices : object_path array
  property_r State : uint32
  property_r Default : boolean
  property_r Vpn : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.DHCP4Config {
  property_r Options : (string, variant) dict
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device {
  property_r Udi : string
  property_r Interface : string
  property_r Driver : string
  property_r Capabilities : uint32
  property_r Ip4Address : uint32
  property_r State : uint32
  property_r Ip4Config : object_path
  property_r Dhcp4Config : object_path
  property_r Ip6Config : object_path
  property_r Managed : boolean
  property_r DeviceType : uint32
  method Disconnect : () -> ()
  signal StateChanged : (new_state : uint32, old_state : uint32, reason : uint32)
}

interface org.freedesktop.NetworkManager.Device.Bluetooth {
  property_r HwAddress : string
  property_r Name : string
  property_r BtCapabilities : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device.Cdma {
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device.Gsm {
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device.OlpcMesh {
  property_r HwAddress : string
  property_r Companion : object_path
  property_r ActiveChannel : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device.Serial {
  signal PppStats : (in_bytes : uint32, out_bytes : uint32)
}

interface org.freedesktop.NetworkManager.Device.Wired {
  property_r HwAddress : string
  property_r Speed : uint32
  property_r Carrier : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface org.freedesktop.NetworkManager.Device.Wireless {
  method GetAccessPoints : () -> (access_points : object_path array)
  property_r HwAddress : string
  property_r Mode : uint32
  property_r Bitrate : uint32
  property_r ActiveAccessPoint : object_path
  property_r WirelessCapabilities : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal AccessPointAdded : (access_point : object_path)
  signal AccessPointRemoved : (access_point : object_path)
}

interface org.freedesktop.NetworkManager.IP4Config {
  property_r Addresses : (uint32 array) array
  property_r Nameservers : uint32 array
  property_r WinsServers : uint32 array
  property_r Domains : string array
  property_r Routes : (uint32 array) array
}

interface org.freedesktop.NetworkManager.IP6Config {
  property_r Addresses : (byte array * uint32) array
  property_r Nameservers : (byte array) array
  property_r Domains : string array
  property_r Routes : (byte array * uint32 * byte array * uint32) array
}

interface org.freedesktop.NetworkManager.PPP {
  method NeedSecrets : () -> (username : string, password : string)
  method SetIp4Config : (config : (string, variant) dict) -> ()
  method SetState : (state : uint32) -> ()
}

interface org.freedesktop.NetworkManager.VPN.Connection {
  signal PropertiesChanged : (properties : (string, variant) dict)
  property_r VpnState : uint32
  property_r Banner : string
  signal VpnStateChanged : (state : uint32, reason : uint32)
}

interface org.freedesktop.NetworkManager.VPN.Plugin {
  method Connect : (connection : (string, (string, variant) dict) dict) -> ()
  method NeedSecrets : (settings : (string, (string, variant) dict) dict) -> (setting_name : string)
  method Disconnect : () -> ()
  method SetIp4Config : (config : (string, variant) dict) -> ()
  method SetFailure : (reason : string) -> ()
  property_r State : uint32
  signal StateChanged : (state : uint32)
  signal Ip4Config : (ip4config : (string, variant) dict)
  signal LoginBanner : (banner : string)
  signal Failure : (reason : uint32)
}

interface org.freedesktop.NetworkManagerSettings {
  method ListConnections : () -> (connections : object_path array)
  method AddConnection : (connection : (string, (string, variant) dict) dict) -> ()
  signal NewConnection : (connection : object_path)
}

interface org.freedesktop.NetworkManagerSettings.Connection {
  method Update : (properties : (string, (string, variant) dict) dict) -> ()
  method Delete : () -> ()
  method GetSettings : () -> (settings : (string, (string, variant) dict) dict)
  signal Updated : (settings : (string, (string, variant) dict) dict)
  signal Removed : ()
}

interface org.freedesktop.NetworkManagerSettings.Connection.Secrets {
  method GetSecrets : (setting_name : string, hints : string array, request_new : boolean) -> (secrets : (string, (string, variant) dict) dict)
}

interface org.freedesktop.NetworkManagerSettings.System {
  method SaveHostname : (hostname : string) -> ()
  property_r Hostname : string
  property_r CanModify : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal CheckPermissions : ()
  method GetPermissions : () -> (permissions : uint32)
}
