(*
 * nm_interfaces.obus
 * ------------------
 * Copyright : (c) 2010, Jeremie Dimino <jeremie@dimino.org>
 * Licence   : BSD3
 *
 * This file is a part of obus, an ocaml implementation of D-Bus.
 *)

interface "org.freedesktop.NetworkManager" {
  method GetDevices : () -> (devices : object_path array)
  method ActivateConnection : (service_name : string, connection : object_path, device : object_path, specific_object : object_path) -> (active_connection : object_path)
  method DeactivateConnection : (active_connection : object_path) -> ()
  method Sleep : (sleep : boolean) -> ()
  property.rw WirelessEnabled : boolean
  property.r WirelessHardwareEnabled : boolean
  property.rw WwanEnabled : boolean
  property.r WwanHardwareEnabled : boolean
  property.r ActiveConnections : object_path array
  property.r State : uint32
  signal StateChanged : (state : uint32)
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal DeviceAdded : (state : object_path)
  signal DeviceRemoved : (state : object_path)
}

interface "org.freedesktop.NetworkManager.AccessPoint" {
  property.r Flags : uint32
  property.r WpaFlags : uint32
  property.r RsnFlags : uint32
  property.r Ssid : byte array
  property.r Frequency : uint32
  property.r HwAddress : string
  property.r Mode : uint32
  property.r MaxBitrate : uint32
  property.r Strength : byte
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Connection.Active" {
  property.r ServiceName : string
  property.r Connection : object_path
  property.r SpecificObject : object_path
  property.r Devices : object_path array
  property.r State : uint32
  property.r Default : boolean
  property.r Vpn : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.DHCP4Config" {
  property.r Options : (string, variant) dict
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device" {
  property.r Udi : string
  property.r Interface : string
  property.r Driver : string
  property.r Capabilities : uint32
  property.r Ip4Address : uint32
  property.r State : uint32
  property.r Ip4Config : object_path
  property.r Dhcp4Config : object_path
  property.r Ip6Config : object_path
  property.r Managed : boolean
  property.r DeviceType : uint32
  method Disconnect : () -> ()
  signal StateChanged : (new_state : uint32, old_state : uint32, reason : uint32)
}

interface "org.freedesktop.NetworkManager.Device.Bluetooth" {
  property.r HwAddress : string
  property.r Name : string
  property.r BtCapabilities : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device.Cdma" {
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device.Gsm" {
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device.OlpcMesh" {
  property.r HwAddress : string
  property.r Companion : object_path
  property.r ActiveChannel : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device.Serial" {
  signal PppStats : (in_bytes : uint32, out_bytes : uint32)
}

interface "org.freedesktop.NetworkManager.Device.Wired" {
  property.r HwAddress : string
  property.r Speed : uint32
  property.r Carrier : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
}

interface "org.freedesktop.NetworkManager.Device.Wireless" {
  method GetAccessPoints : () -> (access_points : object_path array)
  property.r HwAddress : string
  property.r Mode : uint32
  property.r Bitrate : uint32
  property.r ActiveAccessPoint : object_path
  property.r WirelessCapabilities : uint32
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal AccessPointAdded : (access_point : object_path)
  signal AccessPointRemoved : (access_point : object_path)
}

interface "org.freedesktop.NetworkManager.IP4Config" {
  property.r Addresses : (uint32 array) array
  property.r Nameservers : uint32 array
  property.r WinsServers : uint32 array
  property.r Domains : string array
  property.r Routes : (uint32 array) array
}

interface "org.freedesktop.NetworkManager.IP6Config" {
  property.r Addresses : ((byte array * uint32) structure) array
  property.r Nameservers : (byte array) array
  property.r Domains : string array
  property.r Routes : ((byte array * uint32 * byte array * uint32) structure) array
}

interface "org.freedesktop.NetworkManager.PPP" {
  method NeedSecrets : () -> (username : string, password : string)
  method SetIp4Config : (config : (string, variant) dict) -> ()
  method SetState : (state : uint32) -> ()
}

interface "org.freedesktop.NetworkManager.VPN.Connection" {
  signal PropertiesChanged : (properties : (string, variant) dict)
  property.r VpnState : uint32
  property.r Banner : string
  signal VpnStateChanged : (state : uint32, reason : uint32)
}

interface "org.freedesktop.NetworkManager.VPN.Plugin" {
  method Connect : (connection : (string, (string, variant) dict) dict) -> ()
  method NeedSecrets : (settings : (string, (string, variant) dict) dict) -> (setting_name : string)
  method Disconnect : () -> ()
  method SetIp4Config : (config : (string, variant) dict) -> ()
  method SetFailure : (reason : string) -> ()
  property.r State : uint32
  signal StateChanged : (state : uint32)
  signal Ip4Config : (ip4config : (string, variant) dict)
  signal LoginBanner : (banner : string)
  signal Failure : (reason : uint32)
}

interface "org.freedesktop.NetworkManagerSettings" {
  method ListConnections : () -> (connections : object_path array)
  method AddConnection : (connection : (string, (string, variant) dict) dict) -> ()
  signal NewConnection : (connection : object_path)
}

interface "org.freedesktop.NetworkManagerSettings.Connection" {
  method Update : (properties : (string, (string, variant) dict) dict) -> ()
  method Delete : () -> ()
  method GetSettings : () -> (settings : (string, (string, variant) dict) dict)
  signal Updated : (settings : (string, (string, variant) dict) dict)
  signal Removed : ()
}

interface "org.freedesktop.NetworkManagerSettings.Connection.Secrets" {
  method GetSecrets : (setting_name : string, hints : string array, request_new : boolean) -> (secrets : (string, (string, variant) dict) dict)
}

interface "org.freedesktop.NetworkManagerSettings.System" {
  method SaveHostname : (hostname : string) -> ()
  property.r Hostname : string
  property.r CanModify : boolean
  signal PropertiesChanged : (properties : (string, variant) dict)
  signal CheckPermissions : ()
  method GetPermissions : () -> (permissions : uint32)
}
